{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const [loadingData, setLoadingData] = useState(false);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [scrollLoading, setScrollLoading] = useState(false);\n\n  // Simulated function to generate test data\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    return testData;\n  };\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  // Initial data loading\n  useLayoutEffect(() => {\n    let iterations = 0;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData(prevData => [...prevData, ...newData]);\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n  useEffect(() => {\n    // Function to handle scroll event and load more data\n    const handleScroll = () => {\n      if (!loadingData && containerRef.current && containerRef.current.scrollTop + containerRef.current.clientHeight >= containerRef.current.scrollHeight - 50) {\n        setLoadingData(true);\n        // Load more data when the user is close to the bottom\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData(prevData => [...prevData, ...newData]);\n        setLoadingData(false);\n      }\n    };\n\n    // Attach the scroll event listener to the container\n    containerRef.current.addEventListener('scroll', handleScroll);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      containerRef.current.removeEventListener('scroll', handleScroll);\n    };\n  }, [data, pageSize, loadingData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      overflowY: 'auto',\n      height: '400px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"0+WIQ2bclENr1TY/IqhxeeKGTOQ=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","useRef","jsxDEV","_jsxDEV","TestData","_s","data","setData","containerHeight","setContainerHeight","loadingData","setLoadingData","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","scrollLoading","setScrollLoading","generateTestData","numberOfPoints","testData","i","push","id","name","setTimeout","current","clientHeight","iterations","initialDataIteration","console","log","currentPage","Math","ceil","length","startIndex","endIndex","newData","prevData","requestAnimationFrame","handleScroll","scrollTop","scrollHeight","addEventListener","removeEventListener","ref","style","overflowY","height","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const [loadingData, setLoadingData] = useState(false);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [scrollLoading, setScrollLoading] = useState(false);\n\n  // Simulated function to generate test data\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    return testData;\n  };\n\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  // Initial data loading\n  useLayoutEffect(() => {\n    let iterations = 0;\n\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData((prevData) => [...prevData, ...newData]);\n\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  useEffect(() => {\n    // Function to handle scroll event and load more data\n    const handleScroll = () => {\n      if (\n        !loadingData &&\n        containerRef.current &&\n        containerRef.current.scrollTop + containerRef.current.clientHeight >=\n          containerRef.current.scrollHeight - 50\n      ) {\n        setLoadingData(true);\n        // Load more data when the user is close to the bottom\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData((prevData) => [...prevData, ...newData]);\n        setLoadingData(false);\n      }\n    };\n\n    // Attach the scroll event listener to the container\n    containerRef.current.addEventListener('scroll', handleScroll);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      containerRef.current.removeEventListener('scroll', handleScroll);\n    };\n  }, [data, pageSize, loadingData]);\n\n  return (\n    <div ref={containerRef} style={{ overflowY: 'auto', height: '400px' }}>\n      <h1>Test Data</h1>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}