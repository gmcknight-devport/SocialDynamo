{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n\n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n\n// //Scroll logic\n// useEffect(() => {\n//   setLoading(true); // Set loading to true before fetching data\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n//     setData((prevData) => [...prevData, ...newData]);\n//     setLoading(false); // Set loading back to false after data is fetched\n//   }, 1500);\n\n//   return () => {\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };\n// }, [page]);\n\n// const handleScroll = () => {\n//   if (\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n//   ) {\n//     setPage((prevPage) => prevPage + 1);\n//   }\n// };\n\n// useEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  // Simulated function to generate test data\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    return testData;\n  };\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n  useLayoutEffect(() => {\n    let iterations = 0;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) return;\n      addDataToPage();\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  //Function to add data\n  const addDataToPage = () => {\n    let testData = [];\n    console.log(\"In add data method\");\n    ++currPage;\n    let startIndex = (currPage - 1) * 10;\n    console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    for (let i = startIndex; i < startIndex + pageSize; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    currPage++;\n    setData(prevData => [...prevData, ...testData]);\n    setLoading(false);\n  };\n\n  //Scroll logic\n  // useEffect(() => {\n  //   setLoading(true); // Set loading to true before fetching data\n\n  //   const timeout = setTimeout(() => {\n  //     const newData = generateTestData(pageSize);\n  //     setData((prevData) => [...prevData, ...newData]);\n  //     setLoading(false); // Set loading back to false after data is fetched\n  //   }, 1500);\n\n  //   return () => {\n  //     clearTimeout(timeout); // Cleanup function clears the timeout\n  //   };\n  // }, [page]);\n\n  // const handleScroll = () => {\n  //   if (\n  //     window.innerHeight + document.documentElement.scrollTop + 1 >=\n  //     document.documentElement.scrollHeight\n  //   ) {\n  //     setPage((prevPage) => prevPage + 1);\n  //   }\n  // };\n\n  // const fetchMoreData = () => {\n  //   if (loading) {\n  //     return; // Avoid fetching data if already loading\n  //   }\n\n  //   setLoading(true);\n\n  //   const timeout = setTimeout(() => {\n  //     const newData = generateTestData(pageSize);\n\n  //     setData((prevData) => [...prevData, ...newData]);\n\n  //     setPage((prevPage) => prevPage + 1);\n  //   }, 1500);\n  //   return () => {\n  //     setLoading(false);\n  //     clearTimeout(timeout); // Cleanup function clears the timeout\n  //   };  \n  // };\n\n  // const handleScroll = () => {\n  //   if (window.innerHeight + document.documentElement.scrollTop + 1 >= \n  //      document.documentElement.scrollHeight) {\n  //       fetchMoreData();\n  //   }\n  // };\n\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100;\n    if (isScrollingToBottom && !loading) {\n      setLoading(true);\n      const newData = generateTestData(pageSize);\n      setData(prevData => [...prevData, ...newData]);\n      setPage(prevPage => prevPage + 1);\n      setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 19\n    }, this), resultsEnd && \"No More Posts\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"gzDJLp11fr4sU8umNNqX8l7UbTY=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","useRef","LoadingSpinner","jsxDEV","_jsxDEV","PAGE_NUMBER","MaxSeed","currPage","TestData","_s","data","setData","containerHeight","setContainerHeight","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","page","setPage","loading","setLoading","resultsEnd","setResultsEnd","generateTestData","numberOfPoints","testData","i","push","id","name","setTimeout","current","clientHeight","iterations","initialDataIteration","addDataToPage","console","log","requestAnimationFrame","startIndex","prevData","handleScroll","isScrollingToBottom","scrollY","document","documentElement","scrollHeight","newData","prevPage","addEventListener","removeEventListener","ref","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n    \n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    \n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n  \n// //Scroll logic\n// useEffect(() => {\n//   setLoading(true); // Set loading to true before fetching data\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n//     setData((prevData) => [...prevData, ...newData]);\n//     setLoading(false); // Set loading back to false after data is fetched\n//   }, 1500);\n\n//   return () => {\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };\n// }, [page]);\n\n// const handleScroll = () => {\n//   if (\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n//   ) {\n//     setPage((prevPage) => prevPage + 1);\n//   }\n// };\n\n// useEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\n\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  // Simulated function to generate test data\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    \n    return testData;\n  };\n\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  useLayoutEffect(() => {\n    let iterations = 0;\n\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) return;\n      \n      addDataToPage();\n\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  //Function to add data\n  const addDataToPage = () => {\n    let testData = [];\n    console.log(\"In add data method\");\n    ++currPage;\n    let startIndex = (currPage - 1) * 10\n    console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    \n    for (let i = startIndex; i < startIndex + pageSize; i++) {        \n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n\n    currPage++;    \n    setData((prevData) => [...prevData, ...testData]);\n    setLoading(false);\n  }\n  \n//Scroll logic\n// useEffect(() => {\n//   setLoading(true); // Set loading to true before fetching data\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n//     setData((prevData) => [...prevData, ...newData]);\n//     setLoading(false); // Set loading back to false after data is fetched\n//   }, 1500);\n\n//   return () => {\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };\n// }, [page]);\n\n// const handleScroll = () => {\n//   if (\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n//   ) {\n//     setPage((prevPage) => prevPage + 1);\n//   }\n// };\n\n\n\n// const fetchMoreData = () => {\n//   if (loading) {\n//     return; // Avoid fetching data if already loading\n//   }\n\n//   setLoading(true);\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n\n//     setData((prevData) => [...prevData, ...newData]);\n    \n//     setPage((prevPage) => prevPage + 1);\n//   }, 1500);\n//   return () => {\n//     setLoading(false);\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };  \n// };\n\n// const handleScroll = () => {\n//   if (window.innerHeight + document.documentElement.scrollTop + 1 >= \n//      document.documentElement.scrollHeight) {\n//       fetchMoreData();\n//   }\n// };\n\nconst handleScroll = () => {\n  const isScrollingToBottom =\n    window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100;\n\n  if (isScrollingToBottom && !loading) {\n    setLoading(true);\n\n    const newData = generateTestData(pageSize);\n\n    setData(prevData => [...prevData, ...newData]);\n    setPage(prevPage => prevPage + 1);\n\n    setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n  }\n};\n\nuseLayoutEffect(() => {\n  window.addEventListener('scroll', handleScroll);\n  return () => window.removeEventListener('scroll', handleScroll);\n}, []);\n\n  return (\n    <div ref={containerRef}>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n      {loading && <LoadingSpinner />}\n      {resultsEnd && \"No More Posts\"}\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}