{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Documents\\\\GitHub\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './profile.css';\nimport ProfileHeader from '../components/profile/profile-header';\nimport BlobToImage from '../util/blob-to-image';\nimport LoadingSpinner from '../components/loader';\nimport Post from '../components/post/post';\nimport SideNav from '../components/sidebar/sidenav';\nimport RefreshLogin from '../util/refresh-login';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction profile() {\n  _s();\n  const [modal, setModal] = useState(false);\n  const [error, setError] = useState('');\n  const {\n    userId\n  } = useParams();\n  const [page, setPage] = useState(1);\n  const [posts, setPosts] = useState('');\n  const [images, setImages] = useState('');\n  const [selectedPostIndex, setSelectedPostIndex] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n  const url = JSON.parse(localStorage.getItem('url')) || null;\n\n  //Initialise posts\n  useEffect(() => {\n    document.title = 'Profile - Social Dynamo';\n    const fetchData = async () => {\n      await getUserPosts();\n    };\n    fetchData();\n  }, []);\n\n  //Stop scrolling when post modal is open\n  useEffect(() => {\n    document.body.style.overflow = modal ? 'hidden' : 'unset';\n\n    // Cleanup: Reset the style when the component is unmounted\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [modal]);\n\n  //Modal logic\n  const toggleModal = () => {\n    setModal(!modal);\n  };\n  if (modal) {\n    document.body.classList.add('active-modal');\n  } else {\n    document.body.classList.remove('active-modal');\n  }\n\n  //Get user posts from api\n  const getUserPosts = async () => {\n    try {\n      //Fetch data\n      const response = await fetch(url + `/baseaggregator/userposts/${userId}/${page}`, {\n        method: 'GET',\n        mode: 'cors',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseJson = await response.json();\n\n      //Handle different responses\n      if (response.ok) {\n        setPosts(prevData => [...prevData, ...data]);\n        setPage(page + 1);\n        setError('');\n        for (const post of data) {\n          const image = await fetchImages(post.Files[0]);\n          if (image) {\n            setImages(prevImages => [...prevImages, image]);\n          }\n        }\n      } else if (response.status === 401) {\n        RefreshLogin();\n        getUserPosts();\n      } else {\n        setError(dataWrapper.value);\n        setResultsEnd(true);\n      }\n    } catch (error) {\n      setError(\"Unexpected error occurred, unable to fetch posts.\");\n    }\n  };\n\n  //Convert blob to url for post grid\n  const fetchImages = async image => {\n    const result = await BlobToImage({\n      byteArray: image\n    });\n    setImages(prevImages => [...prevImages, result]);\n  };\n\n  //Infinite scrolling logic\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrollingToBottom && !loading && !resultsEnd) {\n      setLoading(true);\n      getUserPosts();\n    }\n    setLoading(false);\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  //Set post data and open modal\n  const openPost = (event, index) => {\n    const selectedPost = posts[index];\n    if (selectedPost) {\n      setSelectedPostIndex(index);\n      toggleModal();\n    } else {\n      console.error(\"Selected post is undefined.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Profile\",\n    children: [/*#__PURE__*/_jsxDEV(SideNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ProfileHeader, {\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 23\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-grid\",\n      children: [images && images.map((data, index) => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"image\",\n          src: data && data.original ? data.original : '',\n          alt: data && data.original === null ? 'Image not found' : '',\n          onClick: event => openPost(event, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this);\n      }), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }, this), resultsEnd && \"No More Posts\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this), modal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggleModal,\n        className: \"profile-modal-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile-modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(Post, {\n          post: posts[selectedPostIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"profile-close-modal\",\n          onClick: toggleModal,\n          children: /*#__PURE__*/_jsxDEV(CancelOutlinedIcon, {\n            className: \"closeIcon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(profile, \"deogvZmZXw4OvCGSA6e2BmKc5jY=\", false, function () {\n  return [useParams];\n});\nexport default profile;","map":{"version":3,"names":["React","useEffect","useLayoutEffect","useState","useParams","ProfileHeader","BlobToImage","LoadingSpinner","Post","SideNav","RefreshLogin","CancelOutlinedIcon","jsxDEV","_jsxDEV","profile","_s","modal","setModal","error","setError","userId","page","setPage","posts","setPosts","images","setImages","selectedPostIndex","setSelectedPostIndex","loading","setLoading","resultsEnd","setResultsEnd","url","JSON","parse","localStorage","getItem","document","title","fetchData","getUserPosts","body","style","overflow","toggleModal","classList","add","remove","response","fetch","method","mode","credentials","headers","responseJson","json","ok","prevData","data","post","image","fetchImages","Files","prevImages","status","dataWrapper","value","result","byteArray","handleScroll","isScrollingToBottom","window","innerHeight","documentElement","scrollTop","scrollHeight","addEventListener","removeEventListener","openPost","event","index","selectedPost","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","src","original","alt","onClick"],"sources":["C:/Users/glenn/Documents/GitHub/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/profile.js"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport './profile.css';\nimport ProfileHeader from '../components/profile/profile-header';\nimport BlobToImage from '../util/blob-to-image';\nimport LoadingSpinner from '../components/loader';\nimport Post from '../components/post/post';\nimport SideNav from '../components/sidebar/sidenav';\nimport RefreshLogin from '../util/refresh-login';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\n\nfunction profile() {\n    const [modal, setModal] = useState(false);\n    const [error, setError] = useState('');\n\n    const {userId} = useParams();\n    const [page, setPage] = useState(1);\n    const [posts, setPosts] = useState('');\n    const [images, setImages] = useState('');\n    const [selectedPostIndex, setSelectedPostIndex] = useState('');\n\n    const [loading, setLoading] = useState(false);\n    const [resultsEnd, setResultsEnd] = useState(false);\n\n    const url = JSON.parse(localStorage.getItem('url')) || null;\n\n    //Initialise posts\n    useEffect(() => {        \n        document.title = 'Profile - Social Dynamo';\n          \n        const fetchData = async () => {\n            await getUserPosts();\n        };\n        fetchData();\n    }, []);\n\n    //Stop scrolling when post modal is open\n    useEffect(() => {\n\n        document.body.style.overflow = modal ? 'hidden' :  'unset';\n        \n        // Cleanup: Reset the style when the component is unmounted\n        return () => {\n            document.body.style.overflow = 'unset';\n        };\n    }, [modal]);\n\n    //Modal logic\n    const toggleModal = () => {\n        setModal(!modal)\n    }\n\n    if(modal) {\n        document.body.classList.add('active-modal')\n    } else {\n        document.body.classList.remove('active-modal')\n    }\n\n    //Get user posts from api\n    const getUserPosts = async () => {\n        try{\n            //Fetch data\n            const response = await fetch(url + `/baseaggregator/userposts/${userId}/${page}`, {\n                method: 'GET',\n                mode: 'cors',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const responseJson = await response.json();\n\n            //Handle different responses\n            if (response.ok) {\n                setPosts((prevData) => [...prevData, ...data]);  \n                setPage(page + 1); \n                setError('');   \n\n                for (const post of data) {\n                    const image = await fetchImages(post.Files[0]);\n                    if (image) {\n                        setImages((prevImages) => [...prevImages, image]);\n                    }\n                }\n\n            } else if (response.status === 401){\n                RefreshLogin();\n                getUserPosts();\n            }else {\n                setError(dataWrapper.value);\n                setResultsEnd(true);\n            }\n        }catch(error){\n            setError(\"Unexpected error occurred, unable to fetch posts.\");\n        }\n    };\n\n    //Convert blob to url for post grid\n    const fetchImages = async (image) => {\n        const result = await BlobToImage({ byteArray: image });\n        setImages((prevImages) => [...prevImages, result]);\n    };\n      \n    //Infinite scrolling logic\n    const handleScroll = () => {\n        const isScrollingToBottom =\n            window.innerHeight + document.documentElement.scrollTop + 1 >=\n            document.documentElement.scrollHeight\n    \n        if (isScrollingToBottom && !loading && !resultsEnd) {\n            setLoading(true);        \n            getUserPosts();\n        }\n        setLoading(false);\n    };\n    \n    useLayoutEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, []);\n\n    //Set post data and open modal\n    const openPost = (event, index) => {\n        const selectedPost = posts[index];\n\n        if (selectedPost) {\n            setSelectedPostIndex(index);\n            toggleModal();\n        } else {\n            console.error(\"Selected post is undefined.\");\n        }\n    };\n\n    return (\n        <div className='Profile'>\n            <SideNav/>\n            <div>\n                <ProfileHeader userId={userId}/>\n            </div>\n            {error && <p className=\"error-message\">{error}</p>}\n            {images.length > 0 && (\n                <div className='post-grid'>                \n                    {images && images.map((data, index) => {\n                        return (            \n                            <img className=\"image\"    \n                                key={index}                            \n                                src={data && data.original ? data.original : ''}\n                                alt={data && data.original === null ? 'Image not found' : ''}\n                                onClick={(event) => openPost(event, index)}                                \n                            />                     \n                        );\n                    })}\n                    {loading && <LoadingSpinner />}\n                    {resultsEnd && \"No More Posts\"}\n                </div> \n                )\n            }  \n            {modal && (\n                <div className='profile-modal'>\n                    <div onClick={toggleModal} className=\"profile-modal-overlay\"></div>\n                    <div className='profile-modal-body'>     \n                        {<Post post={posts[selectedPostIndex]}/>}\n                        <button className=\"profile-close-modal\" onClick={toggleModal}>\n                            <CancelOutlinedIcon className='closeIcon'/>\n                        </button> \n                    </div>      \n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default profile"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}