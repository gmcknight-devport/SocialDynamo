{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Documents\\\\GitHub\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\";\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n// import Post from '../components/post/post';\n// import SideNav from '../components/sidebar/sidenav'; \n\n// const PAGE_NUMBER = 1;\n// var currPage = 1;\n\n// const Dashboard = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   useEffect(() => {\n//     document.title = 'Dashboard - Social Dynamo';\n//   }, []);\n\n//   const getPosts = async () => {\n//     const userId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\n\n//     //Fetch data\n//     const postResponse = await fetch(`http://20.49.168.20:80/baseaggregate/feed/${userId}/${currPage}`, {\n//       method: 'GET',\n//       credentials: 'include',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     });\n\n//     //Handle different responses\n//     const dataWrapper = await postResponse.json();\n//     const { statusCode, data } = dataWrapper;\n\n//     if (statusCode === 200) {\n\n//       setData((prevFiles) => [...prevFiles, data]);\n//       setPage(page + 1);\n\n//     } else if (statusCode === 401){\n//       RefreshLogin();\n//       getPosts();\n//     }else {\n//       setResultsEnd(true);\n//     }\n\n//     currPage++\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //Load data until it exceeds length of the page\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight || resultsEnd) return;\n\n//       getPosts();\n\n//       iterations++;\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n// //Infinite scrolling logic\n// const handleScroll = () => {\n//   const isScrollingToBottom =\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n\n//   if (isScrollingToBottom && !loading && !resultsEnd) {\n//     setLoading(true);\n\n//     getPosts();\n\n//     setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n//   }\n// };\n\n// useLayoutEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>   \n//       <SideNav/>\n//       {data.map((item, index) => {\n//           return (\n//               <Post key={index} post={item[index]} />\n//           );\n//       })}\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction dashboard() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\nexport default dashboard;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","dashboard","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/glenn/Documents/GitHub/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n// import Post from '../components/post/post';\n// import SideNav from '../components/sidebar/sidenav'; \n\n// const PAGE_NUMBER = 1;\n// var currPage = 1;\n\n// const Dashboard = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   useEffect(() => {\n//     document.title = 'Dashboard - Social Dynamo';\n//   }, []);\n\n//   const getPosts = async () => {\n//     const userId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\n\n//     //Fetch data\n//     const postResponse = await fetch(`http://20.49.168.20:80/baseaggregate/feed/${userId}/${currPage}`, {\n//       method: 'GET',\n//       credentials: 'include',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     });\n\n//     //Handle different responses\n//     const dataWrapper = await postResponse.json();\n//     const { statusCode, data } = dataWrapper;\n\n//     if (statusCode === 200) {\n      \n//       setData((prevFiles) => [...prevFiles, data]);\n//       setPage(page + 1);\n\n//     } else if (statusCode === 401){\n//       RefreshLogin();\n//       getPosts();\n//     }else {\n//       setResultsEnd(true);\n//     }\n\n//     currPage++\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //Load data until it exceeds length of the page\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight || resultsEnd) return;\n      \n//       getPosts();\n\n//       iterations++;\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n// //Infinite scrolling logic\n// const handleScroll = () => {\n//   const isScrollingToBottom =\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n\n//   if (isScrollingToBottom && !loading && !resultsEnd) {\n//     setLoading(true);\n\n//     getPosts();\n    \n//     setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n//   }\n// };\n\n// useLayoutEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>   \n//       <SideNav/>\n//       {data.map((item, index) => {\n//           return (\n//               <Post key={index} post={item[index]} />\n//           );\n//       })}\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React from 'react'\n\nfunction dashboard() {\n  return (\n    <div>dashboard</div>\n  )\n}\n\nexport default dashboard"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,SAASA,CAAA,EAAG;EACnB,oBACED,OAAA;IAAAE,QAAA,EAAK;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAExB;AAEA,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}