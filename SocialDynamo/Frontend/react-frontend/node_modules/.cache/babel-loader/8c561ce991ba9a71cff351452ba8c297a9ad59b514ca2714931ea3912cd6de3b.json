{"ast":null,"code":"// // import { createContext, useState, useContext } from 'react'\n// // import PropTypes from 'prop-types';\n\n// // const UserContext = createContext(null);\n\n// // export function useUser() {\n// //     const context = useContext(UserContext);\n// //     if (!context) {\n// //       throw new Error('useUser must be used within a UserProvider');\n// //     }\n// //     return context;\n// // }\n\n// // export default function UserProvider({ children }) {\n// //     const [values, setValues] = useState({\n// //       userId: null,\n// //       name: null,\n// //       profileDescription: null,\n// //       numberFollowers: null,\n// //       profilePicture: null,\n// //     });\n\n// //     const updateValue = (key, newValue) => {\n// //         setValues((prevValues) => ({\n// //             ...prevValues,\n// //             [key]: newValue,\n// //         }));\n// //     };\n\n// //     const setAllValues = (newValues) => {\n// //         console.log('Setting all values:', newValues);\n// //         setValues(prevValues => ({ ...prevValues, ...newValues }));\n// //         console.log(newValues.userId);\n// //         console.log(values.userId);\n// //         //\n// //         console.log(values.userId);\n// //     };\n\n// //     UserProvider.propTypes = {\n// //         userId: PropTypes.string,\n// //         name: PropTypes.string,\n// //         profileDescription: PropTypes.string,\n// //         numberFollowers: PropTypes.number,\n// //         profilePicture: PropTypes.string\n// //       };\n\n// //     return (\n// //         <UserContext.Provider value={{ ...values, setValues, updateValue, setAllValues }}>\n// //           {children}\n// //         </UserContext.Provider>\n// //     );          \n// // }\n// import { createContext, useContext } from 'react';\n\n// const UserContext = createContext(null);\n// export default UserContext;\n\n// export function useUser() {\n//     const context = useContext(UserContext);\n//     if (!context) {\n//         throw new Error('useUser must be used within a UserProvider');\n//     }\n//     return context;\n// }","map":{"version":3,"names":[],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/hooks/use-user.js"],"sourcesContent":["// // import { createContext, useState, useContext } from 'react'\r\n// // import PropTypes from 'prop-types';\r\n\r\n// // const UserContext = createContext(null);\r\n\r\n// // export function useUser() {\r\n// //     const context = useContext(UserContext);\r\n// //     if (!context) {\r\n// //       throw new Error('useUser must be used within a UserProvider');\r\n// //     }\r\n// //     return context;\r\n// // }\r\n\r\n// // export default function UserProvider({ children }) {\r\n// //     const [values, setValues] = useState({\r\n// //       userId: null,\r\n// //       name: null,\r\n// //       profileDescription: null,\r\n// //       numberFollowers: null,\r\n// //       profilePicture: null,\r\n// //     });\r\n          \r\n// //     const updateValue = (key, newValue) => {\r\n// //         setValues((prevValues) => ({\r\n// //             ...prevValues,\r\n// //             [key]: newValue,\r\n// //         }));\r\n// //     };\r\n\r\n// //     const setAllValues = (newValues) => {\r\n// //         console.log('Setting all values:', newValues);\r\n// //         setValues(prevValues => ({ ...prevValues, ...newValues }));\r\n// //         console.log(newValues.userId);\r\n// //         console.log(values.userId);\r\n// //         //\r\n// //         console.log(values.userId);\r\n// //     };\r\n\r\n// //     UserProvider.propTypes = {\r\n// //         userId: PropTypes.string,\r\n// //         name: PropTypes.string,\r\n// //         profileDescription: PropTypes.string,\r\n// //         numberFollowers: PropTypes.number,\r\n// //         profilePicture: PropTypes.string\r\n// //       };\r\n\r\n// //     return (\r\n// //         <UserContext.Provider value={{ ...values, setValues, updateValue, setAllValues }}>\r\n// //           {children}\r\n// //         </UserContext.Provider>\r\n// //     );          \r\n// // }\r\n// import { createContext, useContext } from 'react';\r\n\r\n// const UserContext = createContext(null);\r\n// export default UserContext;\r\n\r\n// export function useUser() {\r\n//     const context = useContext(UserContext);\r\n//     if (!context) {\r\n//         throw new Error('useUser must be used within a UserProvider');\r\n//     }\r\n//     return context;\r\n// }\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}