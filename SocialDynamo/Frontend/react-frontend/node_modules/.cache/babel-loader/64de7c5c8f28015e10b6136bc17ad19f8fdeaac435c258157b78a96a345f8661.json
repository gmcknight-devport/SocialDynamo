{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\components\\\\post\\\\post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./post.css\";\n//import \"./files.css\";\nimport CommentsPopup from \"../modals/comments-popup\";\nimport UserPopup from \"../modals/user-popup\";\nimport UserProfileHeader from \"../user-profile-header\";\nimport BlobToImage from \"../../util/blob-to-image\";\nimport ImageCarousel from \"./image-carousel\";\n//import \"react-image-gallery/styles/css/image-gallery.css\";\nimport \"./image-gallery.css\";\nimport ImageGallery from \"react-image-gallery\";\nimport styled from 'styled-components';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\nimport ArrowCircleRightIcon from '@mui/icons-material/ArrowCircleRight';\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post(_ref) {\n  _s();\n  let {\n    post\n  } = _ref;\n  const [userLiked, setUserLiked] = useState(false);\n  const [likes, setLikes] = useState(post.Likes.length > 0 ? post.Likes : 0);\n  const [hasMultipleFiles, setHasMultipleFiles] = useState(false);\n  const maxHeight = \"600px\";\n  const maxWidth = \"400px\";\n\n  // const images = BlobToImage({ byteArray: post.Files });\n\n  // const largestImageHeight = Math.min(\n  //   images.length > 0 ? Math.max(...images.map(image => image.height)) : 600,\n  //   600\n  // );\n  const [images, setImages] = useState([]);\n  const [largestImageHeight, setLargestImageHeight] = useState();\n  const userRow = {\n    profilepictureblob: post.ProfilePicture,\n    name: post.UsersName,\n    userid: post.UserId\n  };\n  let debounceTimeout;\n  console.log(`maxWidth: ${maxWidth}, maxHeight: ${maxHeight}, height: ${largestImageHeight}`);\n\n  //Loop through once loaded. \n  //Don't think it will work due to images not being loaded, still urls. \n\n  //Set css based on code values\n  const ImageContainer = styled.div`\n    \n    .image-gallery-content,\n    .image-gallery-image,\n    .image-gallery-slides\n    {\n      width: 100%;\n      max-width: ${maxWidth}px;\n      height: ${largestImageHeight}px;\n      max-height: ${maxHeight}px;\n      object-fit: contain;\n    }\n    \n    .image-gallery-slides{\n      border: 1px solid black\n    }\n    `;\n\n  //Initialise multiple files const\n  useEffect(() => {\n    setHasMultipleFiles(post.Files.length > 1);\n    const fetchImages = async () => {\n      const result = await BlobToImage({\n        byteArray: post.Files\n      });\n      setImages(result);\n      setLargestImageHeight;\n    };\n    fetchImages();\n    const largestImageHeight = async () => {\n      const result = Math.min(images.length > 0 ? Math.max(...images.map(image => image.height)) : 600, 600);\n      setLargestImageHeight(result);\n    };\n    largestImageHeight();\n  }, [post.Files.length]);\n\n  //Handle post like\n  const handleLikeClick = () => {\n    setUserLiked(!userLiked);\n\n    // Update the local state of likes\n    const newLikes = userLiked ? likes - 1 : likes + 1;\n    setLikes(newLikes);\n    if (debounceTimeout) {\n      clearTimeout(debounceTimeout);\n    }\n    debounceTimeout = setTimeout(async () => {\n      var _JSON$parse;\n      const postId = post.postId;\n      const likeUserId = ((_JSON$parse = JSON.parse(sessionStorage.getItem('userId'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.UserId) || null;\n      const objMap = {\n        postId,\n        likeUserId\n      };\n      const finalBody = JSON.stringify(objMap);\n\n      //Send data\n      const response = await fetch('http://20.49.168.20:80/posts/likepost', {\n        method: 'PUT',\n        body: finalBody,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }, 300);\n  };\n\n  //Fetch current likes from API\n  const fetchPostLikes = async () => {\n    // const userIds = post.likes.map((like) => like.LikeUserId);\n\n    // const objMap = { userIds };\n    // const finalBody = JSON.stringify(objMap);\n\n    // //Send data              \n    // const response = await fetch('http://20.49.168.20:80/account/Profiles', {\n    //   method: 'PUT',\n    //   body: finalBody,\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n\n    // const data = await response.json();\n\n    // //Map response and update\n    // const processedData = post.likes.map((item, index) => ({\n    //   userId: item.LikeUserId,\n    //   name: data[index].forename + ' ' + data[index].surname,\n    //   profilePictureBlob: data[index].profilePictureBlob\n    // }));      \n\n    // if(userLiked) processedData.unshift(userRow);\n\n    // return processedData;\n    const testLikesData = [{\n      userId: 1,\n      name: 'John Doe',\n      profilePictureBlob: null\n    }, {\n      userId: 2,\n      name: 'Jane Smith',\n      profilePictureBlob: null\n    }, {\n      userId: 3,\n      name: 'Bob Johnson',\n      profilePictureBlob: null\n    }];\n    return testLikesData;\n  };\n  console.log(images);\n\n  //  //\n  //Set max height and max width with !important?\n  //Set width with !important?\n  //  Might not need to since the div wraps both the gallery and the single image. \n  //All width should be constant. \n  //Should resize images to this width, mainaining aspect ratio, maybe in blob-to-image\n  //Remember to set background\n\n  //  //\n  //Ensure image is centred. \n\n  //  //\n  //Could try only defining width, should maintain aspect ratio of height. \n  //Will just need to set height to maximum image size. \n  //Scale everything else up to fit width\n\n  //  //\n  //Could just scale everything to fit the biggest height inside 598px? \n  //\n\n  //\n  // Could scale everything up within 50 - 100px?\n  //\n\n  //Custom rendering for left nav icon\n  function renderLeftNav(onClick, disabled) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"image-gallery-left-nav\",\n      disabled: disabled,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(ArrowCircleLeftIcon, {\n        className: \"LeftIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this);\n  }\n  ;\n\n  //Custom render for right nav icon\n  function renderRightNav(onClick, disabled) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"image-gallery-right-nav\",\n      disabled: disabled,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(ArrowCircleRightIcon, {\n        className: \"RightIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this);\n  }\n  console.log(\"Has multiple files: \" + hasMultipleFiles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-header\",\n      children: /*#__PURE__*/_jsxDEV(UserProfileHeader, {\n        profilepictureblob: post.ProfilePicture,\n        name: post.UsersName,\n        userid: post.UserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cont\",\n      children: hasMultipleFiles ? /*#__PURE__*/_jsxDEV(ImageContainer, {\n        children: /*#__PURE__*/_jsxDEV(ImageGallery, {\n          items: images,\n          renderLeftNav: renderLeftNav,\n          renderRightNav: renderRightNav,\n          showPlayButton: false,\n          showFullscreenButton: false,\n          showThumbnails: false,\n          autoPlay: false,\n          disableKeyDown: true,\n          showBullets: true,\n          disableThumbnailScroll: true,\n          disableThumbnailSwipe: true,\n          infinite: false,\n          useBrowserFullscreen: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image\"\n        //src={imageUrls[0].props.src}\n        ,\n        alt: `Image not found`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-footerIcons\",\n        children: [/*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n          onClick: handleLikeClick,\n          style: {\n            color: userLiked ? 'red' : 'inherit'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CommentsPopup, {\n          postId: post.PostId,\n          commentData: post.Comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserPopup, {\n        title: \"Likes\",\n        data: fetchPostLikes,\n        buttonComponent: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'blue'\n          },\n          children: [likes, \" likes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n}\n_s(Post, \"estDpTO8Wht3D1i5dXS+DiChRco=\");\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","CommentsPopup","UserPopup","UserProfileHeader","BlobToImage","ImageCarousel","ImageGallery","styled","ArrowCircleLeftIcon","ArrowCircleRightIcon","FavoriteBorderIcon","jsxDEV","_jsxDEV","Post","_ref","_s","post","userLiked","setUserLiked","likes","setLikes","Likes","length","hasMultipleFiles","setHasMultipleFiles","maxHeight","maxWidth","images","setImages","largestImageHeight","setLargestImageHeight","userRow","profilepictureblob","ProfilePicture","name","UsersName","userid","UserId","debounceTimeout","console","log","ImageContainer","div","Files","fetchImages","result","byteArray","Math","min","max","map","image","height","handleLikeClick","newLikes","clearTimeout","setTimeout","_JSON$parse","postId","likeUserId","JSON","parse","sessionStorage","getItem","objMap","finalBody","stringify","response","fetch","method","body","headers","fetchPostLikes","testLikesData","userId","profilePictureBlob","renderLeftNav","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderRightNav","items","showPlayButton","showFullscreenButton","showThumbnails","autoPlay","disableKeyDown","showBullets","disableThumbnailScroll","disableThumbnailSwipe","infinite","useBrowserFullscreen","alt","style","color","PostId","commentData","Comments","title","data","buttonComponent","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/post/post.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport \"./post.css\";\r\n//import \"./files.css\";\r\nimport CommentsPopup from \"../modals/comments-popup\";\r\nimport UserPopup from \"../modals/user-popup\";\r\nimport UserProfileHeader from \"../user-profile-header\";\r\nimport BlobToImage from \"../../util/blob-to-image\";\r\nimport ImageCarousel from \"./image-carousel\";\r\n//import \"react-image-gallery/styles/css/image-gallery.css\";\r\nimport \"./image-gallery.css\";\r\nimport ImageGallery from \"react-image-gallery\";\r\nimport styled from 'styled-components'\r\n\r\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\r\nimport ArrowCircleRightIcon from '@mui/icons-material/ArrowCircleRight';\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\n\r\nexport default function Post({ post }) {\r\n  const [userLiked, setUserLiked] = useState(false);\r\n  const [likes, setLikes] = useState(post.Likes.length > 0 ? post.Likes : 0);\r\n  const [hasMultipleFiles, setHasMultipleFiles] = useState(false)\r\n\r\n  const maxHeight = \"600px\";\r\n  const maxWidth = \"400px\";\r\n  \r\n  // const images = BlobToImage({ byteArray: post.Files });\r\n\r\n  // const largestImageHeight = Math.min(\r\n  //   images.length > 0 ? Math.max(...images.map(image => image.height)) : 600,\r\n  //   600\r\n  // );\r\n  const [images, setImages] = useState([]);\r\n  const [largestImageHeight, setLargestImageHeight] = useState();\r\n\r\n  const userRow = {\r\n    profilepictureblob: post.ProfilePicture,\r\n    name: post.UsersName,\r\n    userid: post.UserId\r\n  }\r\n  let debounceTimeout;\r\n  \r\n  console.log(`maxWidth: ${maxWidth}, maxHeight: ${maxHeight}, height: ${largestImageHeight}`);\r\n\r\n\r\n  //Loop through once loaded. \r\n  //Don't think it will work due to images not being loaded, still urls. \r\n\r\n  //Set css based on code values\r\n  const ImageContainer = styled.div`\r\n    \r\n    .image-gallery-content,\r\n    .image-gallery-image,\r\n    .image-gallery-slides\r\n    {\r\n      width: 100%;\r\n      max-width: ${maxWidth}px;\r\n      height: ${largestImageHeight}px;\r\n      max-height: ${maxHeight}px;\r\n      object-fit: contain;\r\n    }\r\n    \r\n    .image-gallery-slides{\r\n      border: 1px solid black\r\n    }\r\n    `;\r\n\r\n  //Initialise multiple files const\r\n  useEffect(() => {\r\n    setHasMultipleFiles(post.Files.length > 1);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const fetchImages = async () => {\r\n      const result = await BlobToImage({ byteArray: post.Files });\r\n      setImages(result);\r\n      setLargestImageHeight\r\n    };\r\n\r\n    fetchImages();\r\n\r\n    const largestImageHeight = async() => {\r\n      const result = Math.min(\r\n        images.length > 0 ? Math.max(...images.map(image => image.height)) : 600,\r\n        600)\r\n      setLargestImageHeight(result);\r\n    };\r\n\r\n    largestImageHeight();\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n  }, [post.Files.length]);\r\n\r\n  //Handle post like\r\n  const handleLikeClick = () => {\r\n    setUserLiked(!userLiked);\r\n\r\n    // Update the local state of likes\r\n    const newLikes = userLiked ? likes - 1 : likes + 1;\r\n    setLikes(newLikes);\r\n    \r\n    if (debounceTimeout) {\r\n      clearTimeout(debounceTimeout);\r\n    }\r\n\r\n    debounceTimeout = setTimeout(async () => {            \r\n      const postId = post.postId;\r\n      const likeUserId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\r\n      const objMap = { postId, likeUserId };\r\n      const finalBody = JSON.stringify(objMap);\r\n\r\n      //Send data\r\n      const response = await fetch('http://20.49.168.20:80/posts/likepost', {\r\n        method: 'PUT',\r\n        body: finalBody,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }, 300);\r\n  };\r\n\r\n  //Fetch current likes from API\r\n  const fetchPostLikes = async () => {\r\n    // const userIds = post.likes.map((like) => like.LikeUserId);\r\n      \r\n    // const objMap = { userIds };\r\n    // const finalBody = JSON.stringify(objMap);\r\n\r\n    // //Send data              \r\n    // const response = await fetch('http://20.49.168.20:80/account/Profiles', {\r\n    //   method: 'PUT',\r\n    //   body: finalBody,\r\n    //   headers: {\r\n    //     'Content-Type': 'application/json',\r\n    //   },\r\n    // });\r\n\r\n    // const data = await response.json();\r\n\r\n    // //Map response and update\r\n    // const processedData = post.likes.map((item, index) => ({\r\n    //   userId: item.LikeUserId,\r\n    //   name: data[index].forename + ' ' + data[index].surname,\r\n    //   profilePictureBlob: data[index].profilePictureBlob\r\n    // }));      \r\n    \r\n    // if(userLiked) processedData.unshift(userRow);\r\n\r\n    // return processedData;\r\n    const testLikesData = [\r\n    {\r\n      userId: 1,\r\n      name: 'John Doe',\r\n      profilePictureBlob: null\r\n    },\r\n    {\r\n      userId: 2,\r\n      name: 'Jane Smith',\r\n      profilePictureBlob: null\r\n    },\r\n    {\r\n      userId: 3,\r\n      name: 'Bob Johnson',\r\n      profilePictureBlob: null\r\n    }];\r\n\r\n    return testLikesData;\r\n  };\r\n\r\n  \r\n  console.log(images);\r\n\r\n\r\n  //  //\r\n  //Set max height and max width with !important?\r\n  //Set width with !important?\r\n  //  Might not need to since the div wraps both the gallery and the single image. \r\n  //All width should be constant. \r\n  //Should resize images to this width, mainaining aspect ratio, maybe in blob-to-image\r\n  //Remember to set background\r\n\r\n  //  //\r\n  //Ensure image is centred. \r\n\r\n  //  //\r\n  //Could try only defining width, should maintain aspect ratio of height. \r\n  //Will just need to set height to maximum image size. \r\n  //Scale everything else up to fit width\r\n\r\n  //  //\r\n  //Could just scale everything to fit the biggest height inside 598px? \r\n  //\r\n\r\n\r\n  //\r\n  // Could scale everything up within 50 - 100px?\r\n  //\r\n\r\n  //Custom rendering for left nav icon\r\n  function renderLeftNav(onClick, disabled) {\r\n    return (\r\n      <button\r\n        className='image-gallery-left-nav'\r\n        disabled={disabled}\r\n        onClick={onClick}>\r\n          <ArrowCircleLeftIcon className='LeftIcon'/>\r\n      </button>\r\n    )\r\n  };\r\n\r\n  //Custom render for right nav icon\r\n  function renderRightNav(onClick, disabled) {\r\n    return (\r\n      <button        \r\n        className='image-gallery-right-nav'\r\n        disabled={disabled}\r\n        onClick={onClick}>\r\n          <ArrowCircleRightIcon className='RightIcon'/>\r\n      </button>\r\n    )\r\n  }\r\n    \r\n  console.log(\"Has multiple files: \" + hasMultipleFiles);\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post-header\">             \r\n        <UserProfileHeader profilepictureblob={post.ProfilePicture} name={post.UsersName} userid={post.UserId}/>           \r\n      </div>\r\n      {/* <div className=\"post-image\"> */}\r\n      <div className=\"cont\">\r\n        {hasMultipleFiles ? (\r\n          <ImageContainer>\r\n            <ImageGallery items={images} \r\n                renderLeftNav={renderLeftNav}\r\n                renderRightNav={renderRightNav}\r\n                showPlayButton={false}\r\n                showFullscreenButton={false}\r\n                showThumbnails={false}\r\n                autoPlay={false}\r\n                disableKeyDown={true}\r\n                showBullets={true}\r\n                disableThumbnailScroll={true}\r\n                disableThumbnailSwipe={true}\r\n                infinite={false}\r\n                useBrowserFullscreen={false}\r\n                />\r\n            </ImageContainer>\r\n        ) : (\r\n          <img\r\n                className=\"image\"\r\n                //src={imageUrls[0].props.src}\r\n                alt={`Image not found`}\r\n            />      \r\n        )}\r\n      </div>     \r\n      <div className=\"post-footer\">\r\n        <div className=\"post-footerIcons\">          \r\n          <FavoriteBorderIcon \r\n              onClick={handleLikeClick} \r\n              style={{ color: userLiked ? 'red' : 'inherit' }} \r\n          />\r\n          <CommentsPopup postId={post.PostId} commentData={post.Comments}/>                   \r\n        </div>\r\n        {/* <UserPopup\r\n          title={'Likes'}\r\n          data={fetchPostLikes}\r\n          buttonText={<span style={{ color: 'blue' }}>{likes} likes</span>}\r\n        /> */}\r\n        <UserPopup\r\n          title=\"Likes\"\r\n          data={fetchPostLikes}\r\n          buttonComponent={<span style={{ color: 'blue' }}>{likes} likes</span>}\r\n        />\r\n      </div>        \r\n    </div>\r\n  );  \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}