{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Documents\\\\GitHub\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\components\\\\modals\\\\create-post-modal.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react'\n// import './create-post-modal.css';\n// import { useCallback } from 'react';\n// import { useDropzone } from 'react-dropzone'\n// import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\n// import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\n// import TaskIcon from '@mui/icons-material/Task';\n// import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\n// import { AlertTitle } from '@mui/material';\n\n// export default function CreatePostModal(){\n//     const [modal, setModal] = useState(false);\n//     const [error, setError] = useState('');\n\n//     const [caption, setCaption] = useState('');\n//     const [hashtag, setHashtag] = useState('');\n//     const [files, setFiles] = useState([]);\n//     const fileLimit = 4;\n//     const [isPublishing, setIsPublishing] = useState(false);\n\n//     const [showAlert, setShowAlert] = useState(false);\n\n//     //Modal logic\n//     const toggleModal = () => {\n//         setModal(!modal)\n//     }\n\n//     if(modal) {\n//         document.body.classList.add('active-modal')\n//     } else {\n//         document.body.classList.remove('active-modal')\n//     }\n\n//     //Handle publish post logic\n//     const handlePublishPost = async () => {\n\n//         if (files.length <= 0 && caption.trim() === '') {\n//             setError(\"Must have a caption and files added\");\n//             return;\n//         }\n\n//         setIsPublishing(true);\n\n//         const authorId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\n//         const formFiles = new FormData();\n\n//         files.forEach((file, index) =>{\n//             formFiles.append(file);\n//         });\n\n//         const objMap = { authorId, hashtag, caption, formFiles };\n//         const finalBody = JSON.stringify(objMap);\n\n//         //Fetch data\n//         const response = await fetch('http://20.49.168.20:80/baseaggregate/post', {\n//             method: 'PUT',\n//             body: finalBody,\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//         });\n\n//         //Handle different responses\n//         const dataWrapper = await response.json();\n//         const { statusCode, data } = dataWrapper;\n\n//         if (statusCode === 200) {\n//             setFiles([]);\n//             setCaption('');\n//             setHashtag('');\n//             setError(\"\");\n//             toggleModal();\n\n//             setIsPublishing(false);\n\n//             setShowAlert(true);\n//             setTimeout(() => {\n//                 setShowAlert(false);\n//             }, 5000);\n\n//         } else {\n//             setError(dataWrapper.value);\n//             setIsPublishing(false);\n//         }\n//     };\n\n//     //Handle add files\n//     const onDrop = useCallback(acceptedFiles => {\n//         if(files.length !== fileLimit){\n//             const file = acceptedFiles[0];\n//             setFiles((prevFiles) => [...prevFiles, file]);\n//             setError(\"\");\n//         }else{\n//             setError(\"File limit reached\");\n//         }\n\n//       }, [])\n//       const {getRootProps, getInputProps} = useDropzone({onDrop});\n\n//     //Handle remove files\n//     const handleRemoveFile = (filename) => {\n//         setFiles(files.filter(file => file.name !== filename));        \n//         setError(\"\");\n//     }\n\n//     //Handle cancel post\n//     const handleCancelPost = () => {\n//         setFiles([]);\n//         setCaption('');\n//         setHashtag('');\n//         setError(\"\");\n//         toggleModal();\n//     }\n\n//     //Render\n//     return( \n//         <>\n//         <div onClick={toggleModal} className=\"create-icon\">\n//             <AddCircleOutlineIcon />\n//             <span>Create</span>\n//         </div>\n\n//         {showAlert && (\n//             <div className='post-alert'>\n//                 <Alert severity=\"success\">\n//                     <AlertTitle>Post Published</AlertTitle>\n//                     Post published successfully!\n//                 </Alert>\n//             </div>\n//         )}\n\n//         {modal && (\n//             <div className='modal'>\n//                 <div onClick={toggleModal} className=\"overlay\"></div>\n//                 <div className='modal-body'>\n//                     <h1>Create Post</h1>\n//                     <div className='post-details'>\n//                         <textarea\n//                             placeholder=\"Post caption or description\"\n//                             className='caption-textarea'\n//                             rows='3'\n//                             onChange={({ target }) => setCaption(target.value)}\n//                             value={caption}\n//                         />\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"Hashtag\"\n//                             className=\"hashtag-input\"\n//                             pattern='/#[a-z0-9]+/'\n//                             onChange={({ target }) => setHashtag(target.value.replace(/\\s/g, ''))}\n//                             value={hashtag}\n//                         />\n//                     </div>\n//                     <div className='modal-upload'>\n//                         <div className=\"modal-container\" >\n//                             <div {...getRootProps({className: 'dropzone'})}>\n//                                 <input accept=\"image/png, image/jpeg\" {...getInputProps()} />\n//                                 <p>Drag and drop some files here, or click to select files</p>\n//                                 <br></br>\n//                                 <p className=\"main\">Supported files</p>\n//                                 <p className=\"info\">JPG, PNG</p>\n//                             </div>                        \n//                         </div>                        \n//                     </div>\n//                     <div className='uploaded-files'>\n//                         {files.map((file, index) => {\n//                             return(\n//                                 <li className=\"file-list\">\n//                                     <TaskIcon/>\n//                                     <span>{file.name}</span>\n//                                     <div className='delete-icon'>\n//                                         <DeleteOutlineIcon onClick={() => handleRemoveFile(file.name)}/>   \n//                                     </div>                                 \n//                                 </li>\n//                             );\n//                         })}\n//                     </div>\n//                     <div className='modal-footer'>\n//                         {error && <p className=\"error-message\">{error}</p>}\n//                         <button className=\"cancel-post\" onClick={handleCancelPost} disabled={isPublishing}>\n//                             Cancel\n//                         </button>\n//                         <button className=\"publish-post\" onClick={handlePublishPost} disabled={isPublishing}>\n//                             Post\n//                         </button>                        \n//                     </div>\n\n//                     <button className=\"close-modal\" onClick={toggleModal} disabled={isPublishing}>\n//                         <CancelOutlinedIcon className='closeIcon'/>\n//                     </button>\n//                 </div>                \n//             </div>\n//         )}\n//     </>)    \n// }\n\nimport React, { useState } from 'react';\nimport './create-post-modal.css';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport { Alert, AlertTitle } from '@mui/material';\nimport FileUpload from '../file-upload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreatePostModal() {\n  _s();\n  const [modal, setModal] = useState(false);\n  const [error, setError] = useState('');\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [caption, setCaption] = useState('');\n  const [hashtag, setHashtag] = useState('');\n  const fileLimit = 4;\n  const [isPublishing, setIsPublishing] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  //Modal logic\n  const toggleModal = () => {\n    setModal(!modal);\n  };\n  if (modal) {\n    document.body.classList.add('active-modal');\n  } else {\n    document.body.classList.remove('active-modal');\n  }\n\n  //Handle file change in FileUpload component\n  const handleFilesChange = newFiles => {\n    setUploadedFiles(() => {\n      const updatedFiles = [...newFiles];\n      return updatedFiles;\n    });\n  };\n\n  //Handle publish post\n  const handlePublishPost = async () => {\n    var _JSON$parse;\n    if (uploadedFiles.length <= 0 && caption.trim() === '') {\n      setError(\"Must have a caption and files added\");\n      return;\n    }\n    setIsPublishing(true);\n    const authorId = ((_JSON$parse = JSON.parse(sessionStorage.getItem('userId'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.UserId) || null;\n    const formFiles = new FormData();\n    files.forEach((file, index) => {\n      formFiles.append(file);\n    });\n    const objMap = {\n      authorId,\n      hashtag,\n      caption,\n      formFiles\n    };\n    const finalBody = JSON.stringify(objMap);\n\n    //Fetch data\n    const response = await fetch('http://20.49.168.20:80/baseaggregate/post', {\n      method: 'PUT',\n      body: finalBody,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    //Handle different responses\n    const dataWrapper = await response.json();\n    const {\n      statusCode,\n      data\n    } = dataWrapper;\n    if (statusCode === 200) {\n      setUploadedFiles([]);\n      setCaption('');\n      setHashtag('');\n      setError('');\n      toggleModal();\n      setIsPublishing(false);\n      setShowAlert(true);\n      setTimeout(() => {\n        setShowAlert(false);\n      }, 5000);\n    } else {\n      setError(dataWrapper.value);\n      setIsPublishing(false);\n    }\n  };\n\n  //Handle cancel post\n  const handleCancelPost = () => {\n    setUploadedFiles([]);\n    setCaption('');\n    setHashtag('');\n    setError('');\n    toggleModal();\n  };\n\n  //Render\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: toggleModal,\n      className: \"create-icon\",\n      children: [/*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-alert\",\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"Post Published\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), \"Post published successfully!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this), modal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggleModal,\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Post caption or description\",\n            className: \"caption-textarea\",\n            rows: \"3\",\n            onChange: _ref => {\n              let {\n                target\n              } = _ref;\n              return setCaption(target.value);\n            },\n            value: caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Hashtag\",\n            className: \"hashtag-input\",\n            pattern: \"/#[a-z0-9]+/\",\n            onChange: _ref2 => {\n              let {\n                target\n              } = _ref2;\n              return setHashtag(target.value.replace(/\\s/g, ''));\n            },\n            value: hashtag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-upload\",\n          children: /*#__PURE__*/_jsxDEV(FileUpload, {\n            fileLimit: fileLimit,\n            onFilesChange: handleFilesChange,\n            setError: setError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-post\",\n            onClick: handleCancelPost,\n            disabled: isPublishing,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"publish-post\",\n            onClick: handlePublishPost,\n            disabled: isPublishing,\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-modal\",\n          onClick: toggleModal,\n          disabled: isPublishing,\n          children: /*#__PURE__*/_jsxDEV(CancelOutlinedIcon, {\n            className: \"closeIcon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(CreatePostModal, \"gUX4sdD5JYypnpIu7AAW2RwXCHw=\");\n_c = CreatePostModal;\nvar _c;\n$RefreshReg$(_c, \"CreatePostModal\");","map":{"version":3,"names":["React","useState","AddCircleOutlineIcon","CancelOutlinedIcon","Alert","AlertTitle","FileUpload","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePostModal","_s","modal","setModal","error","setError","uploadedFiles","setUploadedFiles","caption","setCaption","hashtag","setHashtag","fileLimit","isPublishing","setIsPublishing","showAlert","setShowAlert","toggleModal","document","body","classList","add","remove","handleFilesChange","newFiles","updatedFiles","handlePublishPost","_JSON$parse","length","trim","authorId","JSON","parse","sessionStorage","getItem","UserId","formFiles","FormData","files","forEach","file","index","append","objMap","finalBody","stringify","response","fetch","method","headers","dataWrapper","json","statusCode","data","setTimeout","value","handleCancelPost","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","severity","placeholder","rows","onChange","_ref","target","type","pattern","_ref2","replace","onFilesChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/glenn/Documents/GitHub/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/modals/create-post-modal.js"],"sourcesContent":["// import React, { useState } from 'react'\r\n// import './create-post-modal.css';\r\n// import { useCallback } from 'react';\r\n// import { useDropzone } from 'react-dropzone'\r\n// import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\n// import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\r\n// import TaskIcon from '@mui/icons-material/Task';\r\n// import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\n// import { AlertTitle } from '@mui/material';\r\n\r\n// export default function CreatePostModal(){\r\n//     const [modal, setModal] = useState(false);\r\n//     const [error, setError] = useState('');\r\n\r\n//     const [caption, setCaption] = useState('');\r\n//     const [hashtag, setHashtag] = useState('');\r\n//     const [files, setFiles] = useState([]);\r\n//     const fileLimit = 4;\r\n//     const [isPublishing, setIsPublishing] = useState(false);\r\n\r\n//     const [showAlert, setShowAlert] = useState(false);\r\n\r\n//     //Modal logic\r\n//     const toggleModal = () => {\r\n//         setModal(!modal)\r\n//     }\r\n\r\n//     if(modal) {\r\n//         document.body.classList.add('active-modal')\r\n//     } else {\r\n//         document.body.classList.remove('active-modal')\r\n//     }\r\n\r\n//     //Handle publish post logic\r\n//     const handlePublishPost = async () => {\r\n        \r\n//         if (files.length <= 0 && caption.trim() === '') {\r\n//             setError(\"Must have a caption and files added\");\r\n//             return;\r\n//         }\r\n\r\n//         setIsPublishing(true);\r\n\r\n//         const authorId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\r\n//         const formFiles = new FormData();\r\n\r\n//         files.forEach((file, index) =>{\r\n//             formFiles.append(file);\r\n//         });\r\n\r\n//         const objMap = { authorId, hashtag, caption, formFiles };\r\n//         const finalBody = JSON.stringify(objMap);\r\n    \r\n//         //Fetch data\r\n//         const response = await fetch('http://20.49.168.20:80/baseaggregate/post', {\r\n//             method: 'PUT',\r\n//             body: finalBody,\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//         });\r\n\r\n//         //Handle different responses\r\n//         const dataWrapper = await response.json();\r\n//         const { statusCode, data } = dataWrapper;\r\n\r\n//         if (statusCode === 200) {\r\n//             setFiles([]);\r\n//             setCaption('');\r\n//             setHashtag('');\r\n//             setError(\"\");\r\n//             toggleModal();\r\n\r\n//             setIsPublishing(false);\r\n\r\n//             setShowAlert(true);\r\n//             setTimeout(() => {\r\n//                 setShowAlert(false);\r\n//             }, 5000);\r\n\r\n//         } else {\r\n//             setError(dataWrapper.value);\r\n//             setIsPublishing(false);\r\n//         }\r\n//     };\r\n\r\n//     //Handle add files\r\n//     const onDrop = useCallback(acceptedFiles => {\r\n//         if(files.length !== fileLimit){\r\n//             const file = acceptedFiles[0];\r\n//             setFiles((prevFiles) => [...prevFiles, file]);\r\n//             setError(\"\");\r\n//         }else{\r\n//             setError(\"File limit reached\");\r\n//         }\r\n\r\n//       }, [])\r\n//       const {getRootProps, getInputProps} = useDropzone({onDrop});\r\n\r\n//     //Handle remove files\r\n//     const handleRemoveFile = (filename) => {\r\n//         setFiles(files.filter(file => file.name !== filename));        \r\n//         setError(\"\");\r\n//     }\r\n\r\n//     //Handle cancel post\r\n//     const handleCancelPost = () => {\r\n//         setFiles([]);\r\n//         setCaption('');\r\n//         setHashtag('');\r\n//         setError(\"\");\r\n//         toggleModal();\r\n//     }\r\n\r\n//     //Render\r\n//     return( \r\n//         <>\r\n//         <div onClick={toggleModal} className=\"create-icon\">\r\n//             <AddCircleOutlineIcon />\r\n//             <span>Create</span>\r\n//         </div>\r\n\r\n//         {showAlert && (\r\n//             <div className='post-alert'>\r\n//                 <Alert severity=\"success\">\r\n//                     <AlertTitle>Post Published</AlertTitle>\r\n//                     Post published successfully!\r\n//                 </Alert>\r\n//             </div>\r\n//         )}\r\n\r\n//         {modal && (\r\n//             <div className='modal'>\r\n//                 <div onClick={toggleModal} className=\"overlay\"></div>\r\n//                 <div className='modal-body'>\r\n//                     <h1>Create Post</h1>\r\n//                     <div className='post-details'>\r\n//                         <textarea\r\n//                             placeholder=\"Post caption or description\"\r\n//                             className='caption-textarea'\r\n//                             rows='3'\r\n//                             onChange={({ target }) => setCaption(target.value)}\r\n//                             value={caption}\r\n//                         />\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             placeholder=\"Hashtag\"\r\n//                             className=\"hashtag-input\"\r\n//                             pattern='/#[a-z0-9]+/'\r\n//                             onChange={({ target }) => setHashtag(target.value.replace(/\\s/g, ''))}\r\n//                             value={hashtag}\r\n//                         />\r\n//                     </div>\r\n//                     <div className='modal-upload'>\r\n//                         <div className=\"modal-container\" >\r\n//                             <div {...getRootProps({className: 'dropzone'})}>\r\n//                                 <input accept=\"image/png, image/jpeg\" {...getInputProps()} />\r\n//                                 <p>Drag and drop some files here, or click to select files</p>\r\n//                                 <br></br>\r\n//                                 <p className=\"main\">Supported files</p>\r\n//                                 <p className=\"info\">JPG, PNG</p>\r\n//                             </div>                        \r\n//                         </div>                        \r\n//                     </div>\r\n//                     <div className='uploaded-files'>\r\n//                         {files.map((file, index) => {\r\n//                             return(\r\n//                                 <li className=\"file-list\">\r\n//                                     <TaskIcon/>\r\n//                                     <span>{file.name}</span>\r\n//                                     <div className='delete-icon'>\r\n//                                         <DeleteOutlineIcon onClick={() => handleRemoveFile(file.name)}/>   \r\n//                                     </div>                                 \r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </div>\r\n//                     <div className='modal-footer'>\r\n//                         {error && <p className=\"error-message\">{error}</p>}\r\n//                         <button className=\"cancel-post\" onClick={handleCancelPost} disabled={isPublishing}>\r\n//                             Cancel\r\n//                         </button>\r\n//                         <button className=\"publish-post\" onClick={handlePublishPost} disabled={isPublishing}>\r\n//                             Post\r\n//                         </button>                        \r\n//                     </div>\r\n                        \r\n//                     <button className=\"close-modal\" onClick={toggleModal} disabled={isPublishing}>\r\n//                         <CancelOutlinedIcon className='closeIcon'/>\r\n//                     </button>\r\n//                 </div>                \r\n//             </div>\r\n//         )}\r\n//     </>)    \r\n// }\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport './create-post-modal.css';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\r\nimport { Alert, AlertTitle } from '@mui/material';\r\nimport FileUpload from '../file-upload';\r\n\r\nexport default function CreatePostModal() {  \r\n    const [modal, setModal] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [caption, setCaption] = useState('');\r\n    const [hashtag, setHashtag] = useState('');\r\n    const fileLimit = 4;\r\n    const [isPublishing, setIsPublishing] = useState(false);\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    //Modal logic\r\n    const toggleModal = () => {\r\n        setModal(!modal)\r\n    }\r\n\r\n    if(modal) {\r\n        document.body.classList.add('active-modal')\r\n    } else {\r\n        document.body.classList.remove('active-modal')\r\n    }\r\n  \r\n    //Handle file change in FileUpload component\r\n    const handleFilesChange = (newFiles) => {\r\n        setUploadedFiles(() => {\r\n            const updatedFiles = [...newFiles];\r\n\r\n            return updatedFiles;\r\n        });\r\n    };\r\n\r\n    //Handle publish post\r\n    const handlePublishPost = async () => {\r\n        \r\n        if (uploadedFiles.length <= 0 && caption.trim() === '') {\r\n            setError(\"Must have a caption and files added\");\r\n            return;\r\n        }\r\n\r\n        setIsPublishing(true);\r\n\r\n        const authorId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\r\n        const formFiles = new FormData();\r\n\r\n        files.forEach((file, index) =>{\r\n            formFiles.append(file);\r\n        });\r\n\r\n        const objMap = { authorId, hashtag, caption, formFiles };\r\n        const finalBody = JSON.stringify(objMap);\r\n    \r\n        //Fetch data\r\n        const response = await fetch('http://20.49.168.20:80/baseaggregate/post', {\r\n            method: 'PUT',\r\n            body: finalBody,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        //Handle different responses\r\n        const dataWrapper = await response.json();\r\n        const { statusCode, data } = dataWrapper;\r\n\r\n        if (statusCode === 200) {\r\n            setUploadedFiles([]);\r\n            setCaption('');\r\n            setHashtag('');\r\n            setError('');\r\n            toggleModal();\r\n\r\n            setIsPublishing(false);\r\n\r\n            setShowAlert(true);\r\n            setTimeout(() => {\r\n                setShowAlert(false);\r\n            }, 5000);\r\n\r\n        } else {\r\n            setError(dataWrapper.value);\r\n            setIsPublishing(false);\r\n        }\r\n    };\r\n    \r\n    //Handle cancel post\r\n    const handleCancelPost = () => {\r\n        setUploadedFiles([]);\r\n        setCaption('');\r\n        setHashtag('');\r\n        setError('');\r\n        toggleModal();\r\n    };\r\n\r\n    //Render\r\n    return( \r\n        <>\r\n        <div onClick={toggleModal} className=\"create-icon\">\r\n            <AddCircleOutlineIcon />\r\n            <span>Create</span>\r\n        </div>\r\n\r\n        {showAlert && (\r\n            <div className='post-alert'>\r\n                <Alert severity=\"success\">\r\n                    <AlertTitle>Post Published</AlertTitle>\r\n                    Post published successfully!\r\n                </Alert>\r\n            </div>\r\n        )}\r\n\r\n        {modal && (\r\n            <div className='modal'>\r\n                <div onClick={toggleModal} className=\"overlay\"></div>\r\n                <div className='modal-body'>\r\n                    <h1>Create Post</h1>\r\n                    <div className='post-details'>\r\n                        <textarea\r\n                            placeholder=\"Post caption or description\"\r\n                            className='caption-textarea'\r\n                            rows='3'\r\n                            onChange={({ target }) => setCaption(target.value)}\r\n                            value={caption}\r\n                        />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Hashtag\"\r\n                            className=\"hashtag-input\"\r\n                            pattern='/#[a-z0-9]+/'\r\n                            onChange={({ target }) => setHashtag(target.value.replace(/\\s/g, ''))}\r\n                            value={hashtag}\r\n                        />\r\n                    </div>\r\n                    <div className=\"modal-upload\">\r\n                        <FileUpload fileLimit={fileLimit} onFilesChange={handleFilesChange} setError={setError} />\r\n                    </div>\r\n                    <div className='modal-footer'>\r\n                        {error && <p className=\"error-message\">{error}</p>}\r\n                        <button className=\"cancel-post\" onClick={handleCancelPost} disabled={isPublishing}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"publish-post\" onClick={handlePublishPost} disabled={isPublishing}>\r\n                            Post\r\n                        </button>                        \r\n                    </div>\r\n                        \r\n                    <button className=\"close-modal\" onClick={toggleModal} disabled={isPublishing}>\r\n                        <CancelOutlinedIcon className='closeIcon'/>\r\n                    </button>\r\n                </div>                \r\n            </div>\r\n        )}\r\n    </>)   \r\n} \r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,yBAAyB;AAChC,OAAOC,oBAAoB,MAAM,sCAAsC;AACvE,OAAOC,kBAAkB,MAAM,oCAAoC;AACnE,SAASC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AACjD,OAAOC,UAAU,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}