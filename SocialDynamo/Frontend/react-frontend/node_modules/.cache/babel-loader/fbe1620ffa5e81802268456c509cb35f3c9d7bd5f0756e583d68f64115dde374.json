{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) return;\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n\n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n\n// const handleScroll = () => {\n//   const isScrollingToBottom =\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n\n//   if (isScrollingToBottom && !loading) {\n//     setLoading(true);\n\n//     const newData = generateTestData(pageSize);\n\n//     setData(prevData => [...prevData, ...newData]);\n//     setPage(prevPage => prevPage + 1);\n\n//     setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n//   }\n// };\n\n// useLayoutEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n//Implementation with api call!\nimport React, { useState, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  // const handleLogin = async (event) => {\n  //   event.preventDefault();\n\n  //   const objMap = { emailAddress, password };\n  //   const finalBody = JSON.stringify(objMap);\n\n  //   //Fetch data\n  //   const response = await fetch('http://20.49.168.20:80/authentication/login', {\n  //     method: 'PUT',\n  //     body: finalBody,\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   });\n\n  //   //Handle different responses\n  //   const dataWrapper = await response.json();\n  //   const { statusCode, data } = dataWrapper;\n\n  //   if (statusCode === 200) {\n  //     const token = dataWrapper.token;\n  //     const refreshToken = dataWrapper.refreshToken;\n\n  //     // Store the user in local storage\n  //     const user = { UserId: dataWrapper.userId };\n  //     localStorage.setItem('user', JSON.stringify(user));\n\n  //     // Set the tokens as HTTP-only cookies\n  //     document.cookie = `token=${token}; path=/; Secure; SameSite=Strict`;\n  //     document.cookie = `refreshToken=${refreshToken}; path=/; Secure; SameSite=Strict`;\n\n  //     history.push(ROUTES.DASHBOARD);\n  //   } else {\n  //     setEmailAddress('');\n  //     setPassword('');\n  //     setError(dataWrapper.value)\n  //   }\n  // };\n\n  const getPosts = async page => {\n    event.preventDefault();\n    const objMap = {\n      emailAddress,\n      password\n    };\n    const finalBody = JSON.stringify(objMap);\n\n    //Fetch data\n    const response = await fetch('http://20.49.168.20:80/authentication/login', {\n      method: 'PUT',\n      body: finalBody,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    //Handle different responses\n    const dataWrapper = await response.json();\n    const {\n      statusCode,\n      data\n    } = dataWrapper;\n    if (statusCode === 200) {\n      const token = dataWrapper.token;\n      const refreshToken = dataWrapper.refreshToken;\n\n      // Store the user in local storage\n      const user = {\n        UserId: dataWrapper.userId\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Set the tokens as HTTP-only cookies\n      document.cookie = `token=${token}; path=/; Secure; SameSite=Strict`;\n      document.cookie = `refreshToken=${refreshToken}; path=/; Secure; SameSite=Strict`;\n      history.push(ROUTES.DASHBOARD);\n    } else {\n      setResultsEnd(true);\n    }\n  };\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //Load data until it exceeds length of the page\n  useLayoutEffect(() => {\n    let iterations = 0;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) return;\n      addDataToPage();\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  //Infinite scrolling logic\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrollingToBottom && !loading) {\n      setLoading(true);\n      const newData = generateTestData(pageSize);\n      setData(prevData => [...prevData, ...newData]);\n      setPage(prevPage => prevPage + 1);\n      setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 19\n    }, this), resultsEnd && \"No More Posts\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"gzDJLp11fr4sU8umNNqX8l7UbTY=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useLayoutEffect","useRef","LoadingSpinner","jsxDEV","_jsxDEV","PAGE_NUMBER","MaxSeed","currPage","TestData","_s","data","setData","containerHeight","setContainerHeight","containerRef","pageSize","originalWindowHeight","window","innerHeight","page","setPage","loading","setLoading","resultsEnd","setResultsEnd","getPosts","event","preventDefault","objMap","emailAddress","password","finalBody","JSON","stringify","response","fetch","method","body","headers","dataWrapper","json","statusCode","token","refreshToken","user","UserId","userId","localStorage","setItem","document","cookie","history","push","ROUTES","DASHBOARD","setTimeout","current","clientHeight","iterations","initialDataIteration","addDataToPage","console","log","requestAnimationFrame","handleScroll","isScrollingToBottom","documentElement","scrollTop","scrollHeight","newData","generateTestData","prevData","prevPage","addEventListener","removeEventListener","ref","children","map","item","name","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n    \n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) return;\n      \n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    \n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n\n// const handleScroll = () => {\n//   const isScrollingToBottom =\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n\n//   if (isScrollingToBottom && !loading) {\n//     setLoading(true);\n\n//     const newData = generateTestData(pageSize);\n\n//     setData(prevData => [...prevData, ...newData]);\n//     setPage(prevPage => prevPage + 1);\n\n//     setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n//   }\n// };\n\n// useLayoutEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n//Implementation with api call!\nimport React, { useState, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\n\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  // const handleLogin = async (event) => {\n  //   event.preventDefault();\n    \n  //   const objMap = { emailAddress, password };\n  //   const finalBody = JSON.stringify(objMap);\n    \n  //   //Fetch data\n  //   const response = await fetch('http://20.49.168.20:80/authentication/login', {\n  //     method: 'PUT',\n  //     body: finalBody,\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   });\n\n  //   //Handle different responses\n  //   const dataWrapper = await response.json();\n  //   const { statusCode, data } = dataWrapper;\n\n  //   if (statusCode === 200) {\n  //     const token = dataWrapper.token;\n  //     const refreshToken = dataWrapper.refreshToken;\n\n  //     // Store the user in local storage\n  //     const user = { UserId: dataWrapper.userId };\n  //     localStorage.setItem('user', JSON.stringify(user));\n\n  //     // Set the tokens as HTTP-only cookies\n  //     document.cookie = `token=${token}; path=/; Secure; SameSite=Strict`;\n  //     document.cookie = `refreshToken=${refreshToken}; path=/; Secure; SameSite=Strict`;\n\n  //     history.push(ROUTES.DASHBOARD);\n  //   } else {\n  //     setEmailAddress('');\n  //     setPassword('');\n  //     setError(dataWrapper.value)\n  //   }\n  // };\n\n  const getPosts = async (page) => {\n    event.preventDefault();\n    \n    const objMap = { emailAddress, password };\n    const finalBody = JSON.stringify(objMap);\n    \n    //Fetch data\n    const response = await fetch('http://20.49.168.20:80/authentication/login', {\n      method: 'PUT',\n      body: finalBody,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    //Handle different responses\n    const dataWrapper = await response.json();\n    const { statusCode, data } = dataWrapper;\n\n    if (statusCode === 200) {\n      const token = dataWrapper.token;\n      const refreshToken = dataWrapper.refreshToken;\n\n      // Store the user in local storage\n      const user = { UserId: dataWrapper.userId };\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Set the tokens as HTTP-only cookies\n      document.cookie = `token=${token}; path=/; Secure; SameSite=Strict`;\n      document.cookie = `refreshToken=${refreshToken}; path=/; Secure; SameSite=Strict`;\n\n      history.push(ROUTES.DASHBOARD);\n    } else {\n      setResultsEnd(true);\n    }\n  };\n\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //Load data until it exceeds length of the page\n  useLayoutEffect(() => {\n    let iterations = 0;\n\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) return;\n      \n      addDataToPage();\n\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n//Infinite scrolling logic\nconst handleScroll = () => {\n  const isScrollingToBottom =\n    window.innerHeight + document.documentElement.scrollTop + 1 >=\n    document.documentElement.scrollHeight\n\n  if (isScrollingToBottom && !loading) {\n    setLoading(true);\n\n    const newData = generateTestData(pageSize);\n\n    setData(prevData => [...prevData, ...newData]);\n    setPage(prevPage => prevPage + 1);\n\n    setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n  }\n};\n\nuseLayoutEffect(() => {\n  window.addEventListener('scroll', handleScroll);\n  return () => window.removeEventListener('scroll', handleScroll);\n}, []);\n\n  return (\n    <div ref={containerRef}>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n      {loading && <LoadingSpinner />}\n      {resultsEnd && \"No More Posts\"}\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}