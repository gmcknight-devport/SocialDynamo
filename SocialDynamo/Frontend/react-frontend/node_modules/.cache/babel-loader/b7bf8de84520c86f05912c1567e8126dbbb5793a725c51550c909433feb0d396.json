{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\components\\\\profile\\\\profile.js\",\n  _s = $RefreshSig$();\nimport React, { useLayoutEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './profile.css';\nimport ProfileHeader from './profile-header';\nimport BlobToImage from '../../util/blob-to-image';\nimport LoadingSpinner from '../components/loader';\nimport Post from '../post/post';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction profile() {\n  _s();\n  //Need a grid of 9 x 9?? Might not be since it'll be an array of posts? Check Karl Hadwen\n\n  //css for post in modal - expand in order to accommodate standard size?\n\n  //Might need a way to trigger scrolling function\n  //Might need to extent the page to 110% length in css in order to enable scrolling\n\n  //Can potentially remove timer from scolling logic\n\n  const [modal, setModal] = useState(false);\n  const [error, setError] = useState('');\n  const {\n    userId\n  } = useParams();\n  const [page, setPage] = useState(1);\n  const [posts, setPosts] = useState('');\n  const [images, setImages] = useState('');\n  const [selectedPostIndex, setSelectedPostIndex] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  //Initialise posts\n  useLayoutEffect(async () => {\n    await getUserPosts();\n  });\n\n  //Modal logic\n  const toggleModal = () => {\n    setModal(!modal);\n  };\n  if (modal) {\n    document.body.classList.add('active-modal');\n  } else {\n    document.body.classList.remove('active-modal');\n  }\n\n  //Get user posts from api\n  const getUserPosts = async () => {\n    //Fetch data\n    const response = await fetch(`http://20.49.168.20:80/baseaggregator/userposts/${userId}/${page}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    //Handle different responses\n    const dataWrapper = await response.json();\n    const {\n      statusCode,\n      data\n    } = dataWrapper;\n    if (statusCode === 200) {\n      setPosts(prevData => [...prevData, data]);\n      setPage(page + 1);\n      setError('');\n      data.forEach(post => {\n        const image = fetchImages(post.Files[0]);\n        setImages(prevImages => [...prevImages, ...image]);\n      });\n    } else {\n      setError(dataWrapper.value);\n      setResultsEnd(true);\n    }\n  };\n\n  //Convert blob to url for post grid\n  const fetchImages = async image => {\n    const result = await BlobToImage({\n      byteArray: image\n    });\n    setImages(result);\n  };\n\n  //Infinite scrolling logic\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrollingToBottom && !loading && !resultsEnd) {\n      setLoading(true);\n      getPosts();\n      setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  //\n  //\n  // Should be using postId instead of index??\n  //\n\n  //Set post data and open modal\n  const openPost = index => {\n    setSelectedPostIndex(index);\n    toggleModal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Profile\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header\",\n      children: /*#__PURE__*/_jsxDEV(ProfileHeader, {\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-grid\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }, this), images && images.map((data, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"image-grid\",\n          onClick: () => openPost(index),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            src: data.original || '',\n            alt: data.original === null ? 'Image not found' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), modal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggleModal,\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: posts[selectedPostIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 29\n      }, this), resultsEnd && \"No More Posts\", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-modal\",\n        onClick: toggleModal,\n        disabled: isPublishing,\n        children: /*#__PURE__*/_jsxDEV(CancelOutlinedIcon, {\n          className: \"closeIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(profile, \"RdqeNTWJ8wshS9WpQt5qEV9bqzY=\", false, function () {\n  return [useParams];\n});\nexport default profile;","map":{"version":3,"names":["React","useLayoutEffect","useState","useParams","ProfileHeader","BlobToImage","LoadingSpinner","Post","CancelOutlinedIcon","jsxDEV","_jsxDEV","profile","_s","modal","setModal","error","setError","userId","page","setPage","posts","setPosts","images","setImages","selectedPostIndex","setSelectedPostIndex","loading","setLoading","resultsEnd","setResultsEnd","getUserPosts","toggleModal","document","body","classList","add","remove","response","fetch","method","headers","dataWrapper","json","statusCode","data","prevData","forEach","post","image","fetchImages","Files","prevImages","value","result","byteArray","handleScroll","isScrollingToBottom","window","innerHeight","documentElement","scrollTop","scrollHeight","getPosts","setTimeout","addEventListener","removeEventListener","openPost","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","original","alt","disabled","isPublishing"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/profile/profile.js"],"sourcesContent":["import React, { useLayoutEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport './profile.css';\r\nimport ProfileHeader from './profile-header';\r\nimport BlobToImage from '../../util/blob-to-image';\r\nimport LoadingSpinner from '../components/loader';\r\nimport Post from '../post/post';\r\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\r\n\r\nfunction profile() {\r\n\r\n    //Need a grid of 9 x 9?? Might not be since it'll be an array of posts? Check Karl Hadwen\r\n        \r\n    //css for post in modal - expand in order to accommodate standard size?\r\n    \r\n    //Might need a way to trigger scrolling function\r\n    //Might need to extent the page to 110% length in css in order to enable scrolling\r\n\r\n    //Can potentially remove timer from scolling logic\r\n\r\n\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const {userId} = useParams();\r\n    const [page, setPage] = useState(1);\r\n    const [posts, setPosts] = useState('');\r\n    const [images, setImages] = useState('');\r\n    const [selectedPostIndex, setSelectedPostIndex] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultsEnd, setResultsEnd] = useState(false);\r\n\r\n    //Initialise posts\r\n    useLayoutEffect(async()=> {\r\n        await getUserPosts();\r\n    })\r\n\r\n    //Modal logic\r\n    const toggleModal = () => {\r\n        setModal(!modal)\r\n    }\r\n\r\n    if(modal) {\r\n        document.body.classList.add('active-modal')\r\n    } else {\r\n        document.body.classList.remove('active-modal')\r\n    }\r\n\r\n    //Get user posts from api\r\n    const getUserPosts = async () => {\r\n        //Fetch data\r\n        const response = await fetch(`http://20.49.168.20:80/baseaggregator/userposts/${userId}/${page}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        //Handle different responses\r\n        const dataWrapper = await response.json();\r\n        const { statusCode, data } = dataWrapper;\r\n\r\n        if (statusCode === 200) {\r\n            setPosts((prevData) => [...prevData, data]);  \r\n            setPage(page + 1); \r\n            setError('');   \r\n            \r\n            data.forEach(post => {\r\n                const image = fetchImages(post.Files[0]);\r\n                setImages((prevImages) => [...prevImages, ...image]);\r\n            });\r\n            \r\n           \r\n        } else {\r\n            setError(dataWrapper.value);\r\n            setResultsEnd(true);\r\n        }\r\n    }\r\n\r\n    //Convert blob to url for post grid\r\n    const fetchImages = async (image) => {\r\n        const result = await BlobToImage({ byteArray: image });\r\n        setImages(result);\r\n    };\r\n      \r\n    //Infinite scrolling logic\r\n    const handleScroll = () => {\r\n        const isScrollingToBottom =\r\n            window.innerHeight + document.documentElement.scrollTop + 1 >=\r\n            document.documentElement.scrollHeight\r\n    \r\n        if (isScrollingToBottom && !loading && !resultsEnd) {\r\n            setLoading(true);        \r\n            getPosts();\r\n\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 1500);\r\n        }\r\n    };\r\n    \r\n    useLayoutEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n\r\n    //\r\n    //\r\n    // Should be using postId instead of index??\r\n    //\r\n\r\n    //Set post data and open modal\r\n    const openPost = (index) => {\r\n        setSelectedPostIndex(index)\r\n        toggleModal();\r\n    }\r\n\r\nreturn (\r\n    <div className='Profile'>\r\n        <div className='profile-header'>\r\n            <ProfileHeader userId={userId}/>\r\n        </div>\r\n        <div className='post-grid'>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {images && images.map((data, index) => {\r\n                return (\r\n                    <li className={\"image-grid\"} onClick={() => openPost(index)}>\r\n                        <img className=\"image\"\r\n                            src={data.original || ''}\r\n                            alt={data.original === null ? 'Image not found': ''}\r\n                        />\r\n                    </li>\r\n                );\r\n            })}\r\n        </div>   \r\n        {modal && (\r\n            <div className='modal'>\r\n                <div onClick={toggleModal} className=\"overlay\"></div>\r\n                <div className='modal-body'>     \r\n                    {<Post post={posts[selectedPostIndex]}/>}\r\n                </div>\r\n                {loading && <LoadingSpinner />}\r\n                {resultsEnd && \"No More Posts\"}\r\n                <button className=\"close-modal\" onClick={toggleModal} disabled={isPublishing}>\r\n                    <CancelOutlinedIcon className='closeIcon'/>\r\n                </button>\r\n            </div>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default profile"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}