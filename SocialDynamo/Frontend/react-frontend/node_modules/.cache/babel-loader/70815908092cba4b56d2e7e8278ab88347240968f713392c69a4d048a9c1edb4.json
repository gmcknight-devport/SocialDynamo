{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nexport default function Dashboard() {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 10\n  }, this);\n}\n\n// import React, { useEffect, useState, useRef } from \"react\";\n\n// const PAGE_SIZE = 3;\n// const TOTAL_DATA_COUNT = 100;\n\n// // Function to generate mock data with random values\n// const generateMockData = (count) => {\n//   const mockData = [];\n//   for (let i = 0; i < count; i++) {\n//     mockData.push({\n//       id: i + 1,\n//       name: `Crypto ${i + 1}`,\n//       symbol: `CRYP${i + 1}`,\n//       current_price: Math.random() * 1000, // Random price between 0 and 1000\n//       market_cap: Math.random() * 1000000000, // Random market cap between 0 and 1 billion\n//     });\n//   }\n//   return mockData;\n// };\n\n// const App = () => {\n//   const [coinsData, setCoinsData] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const containerRef = useRef(null);\n\n//   // Function to load more data while scrolling\n//   const loadData = () => {\n//     const container = containerRef.current;\n//     if (container.scrollTop + container.clientHeight >= container.scrollHeight) {\n//       const mockData = generateMockData(PAGE_SIZE);\n//       setCoinsData((prevData) => [...prevData, ...mockData]);\n//       setPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   // Function to load initial data\n//   const loadInitialData = () => {\n//     const container = containerRef.current;\n//     while (container.scrollHeight <= container.clientHeight) {\n//       const mockData = generateMockData(PAGE_SIZE);\n//       setCoinsData((prevData) => [...prevData, ...mockData]);\n//       setPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Load initial data\n//     loadInitialData();\n\n//     // Add scroll event listener for infinite scrolling\n//     const container = containerRef.current;\n//     container.addEventListener(\"scroll\", loadData);\n\n//     // Add resize event listener to handle changes in window height\n//     const handleResize = () => {\n//       loadData();\n//       loadInitialData();\n//     };\n//     window.addEventListener(\"resize\", handleResize);\n\n//     // Remove event listeners on component unmount\n//     return () => {\n//       container.removeEventListener(\"scroll\", loadData);\n//       window.removeEventListener(\"resize\", handleResize);\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Crypto Gallery</h1>\n//       <div className=\"crypto-list\" ref={containerRef}>\n//         {coinsData.map((crypto) => (\n//           <div key={crypto.id} className=\"crypto-item\">\n//             <h3>{crypto.name}</h3>\n//             <p>Symbol: {crypto.symbol}</p>\n//             <p>Price: ${crypto.current_price.toFixed(2)}</p>\n//             <p>Market Cap: ${crypto.market_cap.toFixed(2)}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Dashboard","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nexport default function Dashboard() {\n  return <p>Dashboard</p>\n}\n\n// import React, { useEffect, useState, useRef } from \"react\";\n\n// const PAGE_SIZE = 3;\n// const TOTAL_DATA_COUNT = 100;\n\n// // Function to generate mock data with random values\n// const generateMockData = (count) => {\n//   const mockData = [];\n//   for (let i = 0; i < count; i++) {\n//     mockData.push({\n//       id: i + 1,\n//       name: `Crypto ${i + 1}`,\n//       symbol: `CRYP${i + 1}`,\n//       current_price: Math.random() * 1000, // Random price between 0 and 1000\n//       market_cap: Math.random() * 1000000000, // Random market cap between 0 and 1 billion\n//     });\n//   }\n//   return mockData;\n// };\n\n// const App = () => {\n//   const [coinsData, setCoinsData] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const containerRef = useRef(null);\n\n//   // Function to load more data while scrolling\n//   const loadData = () => {\n//     const container = containerRef.current;\n//     if (container.scrollTop + container.clientHeight >= container.scrollHeight) {\n//       const mockData = generateMockData(PAGE_SIZE);\n//       setCoinsData((prevData) => [...prevData, ...mockData]);\n//       setPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   // Function to load initial data\n//   const loadInitialData = () => {\n//     const container = containerRef.current;\n//     while (container.scrollHeight <= container.clientHeight) {\n//       const mockData = generateMockData(PAGE_SIZE);\n//       setCoinsData((prevData) => [...prevData, ...mockData]);\n//       setPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Load initial data\n//     loadInitialData();\n\n//     // Add scroll event listener for infinite scrolling\n//     const container = containerRef.current;\n//     container.addEventListener(\"scroll\", loadData);\n\n//     // Add resize event listener to handle changes in window height\n//     const handleResize = () => {\n//       loadData();\n//       loadInitialData();\n//     };\n//     window.addEventListener(\"resize\", handleResize);\n\n//     // Remove event listeners on component unmount\n//     return () => {\n//       container.removeEventListener(\"scroll\", loadData);\n//       window.removeEventListener(\"resize\", handleResize);\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Crypto Gallery</h1>\n//       <div className=\"crypto-list\" ref={containerRef}>\n//         {coinsData.map((crypto) => (\n//           <div key={crypto.id} className=\"crypto-item\">\n//             <h3>{crypto.name}</h3>\n//             <p>Symbol: {crypto.symbol}</p>\n//             <p>Price: ${crypto.current_price.toFixed(2)}</p>\n//             <p>Market Cap: ${crypto.market_cap.toFixed(2)}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,SAASA,SAASA,CAAA,EAAG;EAClC,oBAAOC,OAAA;IAAAC,QAAA,EAAG;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AACzB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAC,EAAA,GAxFwBP,SAAS;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}