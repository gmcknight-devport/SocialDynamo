{"ast":null,"code":"\n// import { useState, useEffect, useContext } from 'react';\n// import PropTypes from 'prop-types';\n// import Skeleton from 'react-loading-skeleton';\n// import useUser from '../../hooks/use-user';\n// import { isUserFollowingProfile, toggleFollow } from '../../services/firebase';\n// import UserContext from '../../context/user';\n// import { DEFAULT_IMAGE_PATH } from '../../constants/paths';\n\n// export default function Header({\n//   photosCount,\n//   followerCount,\n//   setFollowerCount,\n//   profile: {\n//     docId: profileDocId,\n//     userId: profileUserId,\n//     fullName,\n//     followers,\n//     following,\n//     username: profileUsername\n//   }\n// }) {\n//   const { user: loggedInUser } = useContext(UserContext);\n//   const { user } = useUser(loggedInUser?.uid);\n//   const [isFollowingProfile, setIsFollowingProfile] = useState(null);\n//   const activeBtnFollow = user?.username && user?.username !== profileUsername;\n\n//   const handleToggleFollow = async () => {\n//     setIsFollowingProfile((isFollowingProfile) => !isFollowingProfile);\n//     setFollowerCount({\n//       followerCount: isFollowingProfile ? followerCount - 1 : followerCount + 1\n//     });\n//     await toggleFollow(isFollowingProfile, user.docId, profileDocId, profileUserId, user.userId);\n//   };\n\n//   useEffect(() => {\n//     const isLoggedInUserFollowingProfile = async () => {\n//       const isFollowing = await isUserFollowingProfile(user.username, profileUserId);\n//       setIsFollowingProfile(!!isFollowing);\n//     };\n\n//     if (user?.username && profileUserId) {\n//       isLoggedInUserFollowingProfile();\n//     }\n//   }, [user?.username, profileUserId]);\n\n//   return (\n//     <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//       <div className=\"container flex justify-center items-center\">\n//         {profileUsername ? (\n//           <img\n//             className=\"rounded-full h-40 w-40 flex\"\n//             alt={`${fullName} profile picture`}\n//             src={`/images/avatars/${profileUsername}.jpg`}\n//             onError={(e) => {\n//               e.target.src = DEFAULT_IMAGE_PATH;\n//             }}\n//           />\n//         ) : (\n//           <Skeleton circle height={150} width={150} count={1} />\n//         )}\n//       </div>\n//       <div className=\"flex items-center justify-center flex-col col-span-2\">\n//         <div className=\"container flex items-center\">\n//           <p className=\"text-2xl mr-4\">{profileUsername}</p>\n//           {activeBtnFollow && isFollowingProfile === null ? (\n//             <Skeleton count={1} width={80} height={32} />\n//           ) : (\n//             activeBtnFollow && (\n//               <button\n//                 className=\"bg-blue-medium font-bold text-sm rounded text-white w-20 h-8\"\n//                 type=\"button\"\n//                 onClick={handleToggleFollow}\n//                 onKeyDown={(event) => {\n//                   if (event.key === 'Enter') {\n//                     handleToggleFollow();\n//                   }\n//                 }}\n//               >\n//                 {isFollowingProfile ? 'Unfollow' : 'Follow'}\n//               </button>\n//             )\n//           )}\n//         </div>\n//         <div className=\"container flex mt-4\">\n//           {!followers || !following ? (\n//             <Skeleton count={1} width={677} height={24} />\n//           ) : (\n//             <>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{photosCount}</span> photos\n//               </p>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{followerCount}</span>\n//                 {` `}\n//                 {followerCount === 1 ? `follower` : `followers`}\n//               </p>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{following?.length}</span> following\n//               </p>\n//             </>\n//           )}\n//         </div>\n//         <div className=\"container mt-4\">\n//           <p className=\"font-medium\">{!fullName ? <Skeleton count={1} height={24} /> : fullName}</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// Header.propTypes = {\n//   photosCount: PropTypes.number.isRequired,\n//   followerCount: PropTypes.number.isRequired,\n//   setFollowerCount: PropTypes.func.isRequired,\n//   profile: PropTypes.shape({\n//     docId: PropTypes.string,\n//     userId: PropTypes.string,\n//     fullName: PropTypes.string,\n//     username: PropTypes.string,\n//     followers: PropTypes.array,\n//     following: PropTypes.array\n//   }).isRequired\n// };","map":{"version":3,"names":[],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/profile/header.js"],"sourcesContent":["\n// import { useState, useEffect, useContext } from 'react';\n// import PropTypes from 'prop-types';\n// import Skeleton from 'react-loading-skeleton';\n// import useUser from '../../hooks/use-user';\n// import { isUserFollowingProfile, toggleFollow } from '../../services/firebase';\n// import UserContext from '../../context/user';\n// import { DEFAULT_IMAGE_PATH } from '../../constants/paths';\n\n// export default function Header({\n//   photosCount,\n//   followerCount,\n//   setFollowerCount,\n//   profile: {\n//     docId: profileDocId,\n//     userId: profileUserId,\n//     fullName,\n//     followers,\n//     following,\n//     username: profileUsername\n//   }\n// }) {\n//   const { user: loggedInUser } = useContext(UserContext);\n//   const { user } = useUser(loggedInUser?.uid);\n//   const [isFollowingProfile, setIsFollowingProfile] = useState(null);\n//   const activeBtnFollow = user?.username && user?.username !== profileUsername;\n\n//   const handleToggleFollow = async () => {\n//     setIsFollowingProfile((isFollowingProfile) => !isFollowingProfile);\n//     setFollowerCount({\n//       followerCount: isFollowingProfile ? followerCount - 1 : followerCount + 1\n//     });\n//     await toggleFollow(isFollowingProfile, user.docId, profileDocId, profileUserId, user.userId);\n//   };\n\n//   useEffect(() => {\n//     const isLoggedInUserFollowingProfile = async () => {\n//       const isFollowing = await isUserFollowingProfile(user.username, profileUserId);\n//       setIsFollowingProfile(!!isFollowing);\n//     };\n\n//     if (user?.username && profileUserId) {\n//       isLoggedInUserFollowingProfile();\n//     }\n//   }, [user?.username, profileUserId]);\n\n//   return (\n//     <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//       <div className=\"container flex justify-center items-center\">\n//         {profileUsername ? (\n//           <img\n//             className=\"rounded-full h-40 w-40 flex\"\n//             alt={`${fullName} profile picture`}\n//             src={`/images/avatars/${profileUsername}.jpg`}\n//             onError={(e) => {\n//               e.target.src = DEFAULT_IMAGE_PATH;\n//             }}\n//           />\n//         ) : (\n//           <Skeleton circle height={150} width={150} count={1} />\n//         )}\n//       </div>\n//       <div className=\"flex items-center justify-center flex-col col-span-2\">\n//         <div className=\"container flex items-center\">\n//           <p className=\"text-2xl mr-4\">{profileUsername}</p>\n//           {activeBtnFollow && isFollowingProfile === null ? (\n//             <Skeleton count={1} width={80} height={32} />\n//           ) : (\n//             activeBtnFollow && (\n//               <button\n//                 className=\"bg-blue-medium font-bold text-sm rounded text-white w-20 h-8\"\n//                 type=\"button\"\n//                 onClick={handleToggleFollow}\n//                 onKeyDown={(event) => {\n//                   if (event.key === 'Enter') {\n//                     handleToggleFollow();\n//                   }\n//                 }}\n//               >\n//                 {isFollowingProfile ? 'Unfollow' : 'Follow'}\n//               </button>\n//             )\n//           )}\n//         </div>\n//         <div className=\"container flex mt-4\">\n//           {!followers || !following ? (\n//             <Skeleton count={1} width={677} height={24} />\n//           ) : (\n//             <>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{photosCount}</span> photos\n//               </p>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{followerCount}</span>\n//                 {` `}\n//                 {followerCount === 1 ? `follower` : `followers`}\n//               </p>\n//               <p className=\"mr-10\">\n//                 <span className=\"font-bold\">{following?.length}</span> following\n//               </p>\n//             </>\n//           )}\n//         </div>\n//         <div className=\"container mt-4\">\n//           <p className=\"font-medium\">{!fullName ? <Skeleton count={1} height={24} /> : fullName}</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// Header.propTypes = {\n//   photosCount: PropTypes.number.isRequired,\n//   followerCount: PropTypes.number.isRequired,\n//   setFollowerCount: PropTypes.func.isRequired,\n//   profile: PropTypes.shape({\n//     docId: PropTypes.string,\n//     userId: PropTypes.string,\n//     fullName: PropTypes.string,\n//     username: PropTypes.string,\n//     followers: PropTypes.array,\n//     following: PropTypes.array\n//   }).isRequired\n// };\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}