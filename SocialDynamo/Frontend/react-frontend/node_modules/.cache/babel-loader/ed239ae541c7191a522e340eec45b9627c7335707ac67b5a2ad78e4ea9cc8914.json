{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\components\\\\post\\\\post.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./post.css\";\nimport \"./files.css\";\nimport CommentsPopup from \"../modals/comments-popup\";\nimport UserPopup from \"../modals/user-popup\";\nimport UserProfileHeader from \"../user-profile-header\";\nimport BlobToImage from \"../../util/blob-to-image\";\nimport ImageCarousel from \"./image-carousel\";\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post(_ref) {\n  _s();\n  let {\n    post\n  } = _ref;\n  const [userLiked, setUserLiked] = useState(false);\n  const [likes, setLikes] = useState(post.likes);\n  const [hasMultipleFiles, setHasMultipleFiles] = useState(() => post.Files.length > 1 ? true : false);\n  const imageUrls = BlobToImage({\n    byteArray: post.Files\n  });\n  const userRow = {\n    profilepictureblob: post.ProfilePicture,\n    name: post.UsersName,\n    userid: post.UserId\n  };\n  let debounceTimeout;\n  const handleLikeClick = () => {\n    setUserLiked(!userLiked);\n\n    // Update the local state of likes\n    const newLikes = userLiked ? likes - 1 : likes + 1;\n    setLikes(newLikes);\n    if (debounceTimeout) {\n      clearTimeout(debounceTimeout);\n    }\n    debounceTimeout = setTimeout(async () => {\n      var _JSON$parse;\n      const postId = post.postId;\n      const likeUserId = ((_JSON$parse = JSON.parse(sessionStorage.getItem('userId'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.UserId) || null;\n      const objMap = {\n        postId,\n        likeUserId\n      };\n      const finalBody = JSON.stringify(objMap);\n\n      //Send data\n      const response = await fetch('http://20.49.168.20:80/posts/likepost', {\n        method: 'PUT',\n        body: finalBody,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }, 300);\n    const fetchPostLikes = async () => {\n      const userIds = post.likes.map(like => like.LikeUserId);\n      const objMap = {\n        userIds\n      };\n      const finalBody = JSON.stringify(objMap);\n\n      //Send data              \n      const response = await fetch('http://20.49.168.20:80/account/Profiles', {\n        method: 'PUT',\n        body: finalBody,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n\n      //Map response and update\n      const processedData = post.likes.map((item, index) => ({\n        userId: item.LikeUserId,\n        name: data[index].forename + ' ' + data[index].surname,\n        profilePictureBlob: data[index].profilePictureBlob\n      }));\n      if (userLiked) processedData.unshift(userRow);\n      return processedData;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-image\",\n        children: hasMultipleFiles ? /*#__PURE__*/_jsxDEV(ImageCarousel, {\n          images: imageUrls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          style: {\n            backgroundImage: `url(${imageUrls})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this);\n  };\n}\n_s(Post, \"i8xXFSV1Rgjel+tZ15CYT1PtJ7U=\");\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","CommentsPopup","UserPopup","UserProfileHeader","BlobToImage","ImageCarousel","FavoriteBorderIcon","jsxDEV","_jsxDEV","Post","_ref","_s","post","userLiked","setUserLiked","likes","setLikes","hasMultipleFiles","setHasMultipleFiles","Files","length","imageUrls","byteArray","userRow","profilepictureblob","ProfilePicture","name","UsersName","userid","UserId","debounceTimeout","handleLikeClick","newLikes","clearTimeout","setTimeout","_JSON$parse","postId","likeUserId","JSON","parse","sessionStorage","getItem","objMap","finalBody","stringify","response","fetch","method","body","headers","fetchPostLikes","userIds","map","like","LikeUserId","data","json","processedData","item","index","userId","forename","surname","profilePictureBlob","unshift","className","children","fileName","_jsxFileName","lineNumber","columnNumber","images","style","backgroundImage","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/post/post.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./post.css\";\r\nimport \"./files.css\";\r\nimport CommentsPopup from \"../modals/comments-popup\";\r\nimport UserPopup from \"../modals/user-popup\";\r\nimport UserProfileHeader from \"../user-profile-header\";\r\nimport BlobToImage from \"../../util/blob-to-image\";\r\nimport ImageCarousel from \"./image-carousel\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\n\r\nexport default function Post({ post }) {\r\n  const [userLiked, setUserLiked] = useState(false);\r\n  const [likes, setLikes] = useState(post.likes);\r\n  const [hasMultipleFiles, setHasMultipleFiles] = useState(() => post.Files.length > 1 ? true : false)\r\n\r\n  const imageUrls = BlobToImage({ byteArray: post.Files });\r\n  \r\n  const userRow = {\r\n    profilepictureblob: post.ProfilePicture,\r\n    name: post.UsersName,\r\n    userid: post.UserId\r\n  }\r\n  let debounceTimeout;\r\n\r\n  const handleLikeClick = () => {\r\n    \r\n    setUserLiked(!userLiked);\r\n\r\n    // Update the local state of likes\r\n    const newLikes = userLiked ? likes - 1 : likes + 1;\r\n    setLikes(newLikes);\r\n    \r\n    if (debounceTimeout) {\r\n      clearTimeout(debounceTimeout);\r\n    }\r\n\r\n    debounceTimeout = setTimeout(async () => {            \r\n                    \r\n    const postId = post.postId;\r\n    const likeUserId = JSON.parse(sessionStorage.getItem('userId'))?.UserId || null;\r\n    const objMap = { postId, likeUserId };\r\n    const finalBody = JSON.stringify(objMap);\r\n\r\n    //Send data\r\n    const response = await fetch('http://20.49.168.20:80/posts/likepost', {\r\n      method: 'PUT',\r\n      body: finalBody,\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }, 300);\r\n\r\n  const fetchPostLikes = async () => {\r\n    const userIds = post.likes.map((like) => like.LikeUserId);\r\n      \r\n    const objMap = { userIds };\r\n    const finalBody = JSON.stringify(objMap);\r\n\r\n    //Send data              \r\n    const response = await fetch('http://20.49.168.20:80/account/Profiles', {\r\n      method: 'PUT',\r\n      body: finalBody,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    //Map response and update\r\n    const processedData = post.likes.map((item, index) => ({\r\n      userId: item.LikeUserId,\r\n      name: data[index].forename + ' ' + data[index].surname,\r\n      profilePictureBlob: data[index].profilePictureBlob\r\n    }));      \r\n    \r\n    if(userLiked) processedData.unshift(userRow);\r\n\r\n    return processedData;\r\n  };\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post-header\">\r\n        {/*\r\n        <UserProfileHeader profilepictureblob={user.ProfilePicture} name={user.UsersName} userid={user.UserId}/>\r\n  */}\r\n      </div>\r\n      <div className=\"post-image\">\r\n        {hasMultipleFiles ? (\r\n          <ImageCarousel images={imageUrls}/>\r\n        ) : (\r\n          <div className=\"image\" style={{ backgroundImage: `url(${imageUrls})` }}/>\r\n        )}\r\n      </div>\r\n      {/*\r\n      <div className=\"post-footer\">\r\n        <div className=\"post-footerIcons\">          \r\n          <FavoriteBorderIcon \r\n              onClick={handleLikeClick} \r\n              style={{ color: userLiked ? 'red' : 'inherit' }} \r\n          />\r\n          <CommentsPopup postId={post.postId} commentData={post.comments}/>                   \r\n        </div>\r\n        <UserPopup\r\n          title={'Likes'}\r\n          data={fetchPostLikes}\r\n          buttonText={<span style={{ color: 'blue' }}>{likes} likes</span>}\r\n        />\r\n      </div>\r\n        */}\r\n    </div>\r\n    );\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}