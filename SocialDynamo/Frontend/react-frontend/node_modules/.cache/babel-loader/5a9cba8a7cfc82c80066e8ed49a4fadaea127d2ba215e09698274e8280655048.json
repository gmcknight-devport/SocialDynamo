{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 3;\n\n// Function to generate mock data with random values\nconst generateMockData = count => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000,\n      // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000 // Random market cap between 0 and 1 billion\n    });\n  }\n\n  return mockData;\n};\nconst App = () => {\n  _s();\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [endOfData, setEndOfData] = useState(false);\n  const containerRef = useRef(null);\n  const originalWindowHeightRef = useRef(window.innerHeight);\n  useEffect(() => {\n    const loadData = () => {\n      const dataToLoad = PAGE_SIZE * page;\n      const mockData = generateMockData(dataToLoad);\n      setCoinsData(prevData => [...prevData, ...mockData]);\n    };\n    if (coinsData.length === 0 || coinsData.length < PAGE_SIZE * page) {\n      loadData(); // Load more data if there isn't enough data or on initial load\n    }\n\n    // Check if the container height exceeds the original window height\n    const containerHeight = containerRef.current.offsetHeight;\n    const windowHeight = window.innerHeight;\n    if (containerHeight <= windowHeight) {\n      setPage(prev => prev + 1);\n    } else {\n      setEndOfData(true);\n    }\n    const handleScroll = () => {\n      if (endOfData) return;\n      const containerHeight = containerRef.current.offsetHeight;\n      const windowHeight = window.innerHeight;\n      if (containerHeight > originalWindowHeightRef.current) {\n        setPage(prev => prev + 1);\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [page, endOfData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crypto Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-list\",\n      ref: containerRef,\n      children: coinsData.map(crypto => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crypto-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: crypto.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Symbol: \", crypto.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", crypto.current_price.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Market Cap: $\", crypto.market_cap.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)]\n      }, crypto.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), endOfData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"End of Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1M5ja1vpVWPEfx9+RweZp5LsBY0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","PAGE_SIZE","generateMockData","count","mockData","i","push","id","name","symbol","current_price","Math","random","market_cap","App","_s","coinsData","setCoinsData","page","setPage","endOfData","setEndOfData","containerRef","originalWindowHeightRef","window","innerHeight","loadData","dataToLoad","prevData","length","containerHeight","current","offsetHeight","windowHeight","prev","handleScroll","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","crypto","toFixed","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n\n\nimport React, { useEffect, useState, useRef } from \"react\";\n\nconst PAGE_SIZE = 3;\n\n// Function to generate mock data with random values\nconst generateMockData = (count) => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000, // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000, // Random market cap between 0 and 1 billion\n    });\n  }\n  return mockData;\n};\n\nconst App = () => {\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [endOfData, setEndOfData] = useState(false);\n  const containerRef = useRef(null);\n  const originalWindowHeightRef = useRef(window.innerHeight);\n\n  useEffect(() => {\n    const loadData = () => {\n      const dataToLoad = PAGE_SIZE * page;\n      const mockData = generateMockData(dataToLoad);\n      setCoinsData((prevData) => [...prevData, ...mockData]);\n    };\n\n    if (coinsData.length === 0 || coinsData.length < PAGE_SIZE * page) {\n      loadData(); // Load more data if there isn't enough data or on initial load\n    }\n\n    // Check if the container height exceeds the original window height\n    const containerHeight = containerRef.current.offsetHeight;\n    const windowHeight = window.innerHeight;\n    if (containerHeight <= windowHeight) {\n      setPage((prev) => prev + 1);\n    } else {\n      setEndOfData(true);\n    }\n\n    const handleScroll = () => {\n      if (endOfData) return;\n\n      const containerHeight = containerRef.current.offsetHeight;\n      const windowHeight = window.innerHeight;\n\n      if (containerHeight > originalWindowHeightRef.current) {\n        setPage((prev) => prev + 1);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [page, endOfData]);\n\n  return (\n    <div className=\"app\">\n      <h1>Crypto Gallery</h1>\n      <div className=\"crypto-list\" ref={containerRef}>\n        {coinsData.map((crypto) => (\n          <div key={crypto.id} className=\"crypto-item\">\n            <h3>{crypto.name}</h3>\n            <p>Symbol: {crypto.symbol}</p>\n            <p>Price: ${crypto.current_price.toFixed(2)}</p>\n            <p>Market Cap: ${crypto.market_cap.toFixed(2)}</p>\n          </div>\n        ))}\n      </div>\n      {endOfData && <p>End of Data</p>}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,SAAS,GAAG,CAAC;;AAEnB;AACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9BD,QAAQ,CAACE,IAAI,CAAC;MACZC,EAAE,EAAEF,CAAC,GAAG,CAAC;MACTG,IAAI,EAAG,UAASH,CAAC,GAAG,CAAE,EAAC;MACvBI,MAAM,EAAG,OAAMJ,CAAC,GAAG,CAAE,EAAC;MACtBK,aAAa,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI;MAAE;MACrCC,UAAU,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAE;IAC1C,CAAC,CAAC;EACJ;;EACA,OAAOR,QAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}