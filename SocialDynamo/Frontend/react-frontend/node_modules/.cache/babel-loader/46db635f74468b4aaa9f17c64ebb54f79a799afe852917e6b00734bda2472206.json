{"ast":null,"code":"import { firebase, FieldValue } from '../lib/firebase';\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection('users').where('username', '==', username.toLowerCase()).get();\n  return result.docs.length > 0;\n}\nexport async function getUserByUsername(username) {\n  const result = await firebase.firestore().collection('users').where('username', '==', username.toLowerCase()).get();\n  return result.docs.map(item => ({\n    ...item.data(),\n    docId: item.id\n  }));\n}\n\n// get user from the firestore where userId === userId (passed from the auth)\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n  const user = result.docs.map(item => ({\n    ...item.data(),\n    docId: item.id\n  }));\n  return user;\n}\n\n// check all conditions before limit results\nexport async function getSuggestedProfiles(userId, following) {\n  let query = firebase.firestore().collection('users');\n  if (following.length > 0) {\n    query = query.where('userId', 'not-in', [...following, userId]);\n  } else {\n    query = query.where('userId', '!=', userId);\n  }\n  const result = await query.limit(10).get();\n  const profiles = result.docs.map(user => ({\n    ...user.data(),\n    docId: user.id\n  }));\n  return profiles;\n}\nexport async function updateLoggedInUserFollowing(loggedInUserDocId,\n// currently logged in user document id (karl's profile)\nprofileId,\n// the user that karl requests to follow\nisFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase.firestore().collection('users').doc(loggedInUserDocId).update({\n    following: isFollowingProfile ? FieldValue.arrayRemove(profileId) : FieldValue.arrayUnion(profileId)\n  });\n}\nexport async function updateFollowedUserFollowers(profileDocId,\n// currently logged in user document id (karl's profile)\nloggedInUserDocId,\n// the user that karl requests to follow\nisFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase.firestore().collection('users').doc(profileDocId).update({\n    followers: isFollowingProfile ? FieldValue.arrayRemove(loggedInUserDocId) : FieldValue.arrayUnion(loggedInUserDocId)\n  });\n}\nexport async function getPhotos(userId, following) {\n  // [5,4,2] => following\n  const result = await firebase.firestore().collection('photos').where('userId', 'in', following).get();\n  const userFollowedPhotos = result.docs.map(photo => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    }\n    // photo.userId = 2\n    const user = await getUserByUserId(photo.userId);\n    // raphael\n    const {\n      username\n    } = user[0];\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}\nexport async function getUserPhotosByUserId(userId) {\n  const result = await firebase.firestore().collection('photos').where('userId', '==', userId).get();\n  const photos = result.docs.map(photo => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n  return photos;\n}\nexport async function isUserFollowingProfile(loggedInUserUsername, profileUserId) {\n  const result = await firebase.firestore().collection('users').where('username', '==', loggedInUserUsername) // karl (active logged in user)\n  .where('following', 'array-contains', profileUserId).get();\n  const [response = {}] = result.docs.map(item => ({\n    ...item.data(),\n    docId: item.id\n  }));\n  return response.userId;\n}\nexport async function toggleFollow(isFollowingProfile, activeUserDocId, profileDocId, profileUserId, followingUserId) {\n  // 1st param: karl's doc id\n  // 2nd param: raphael's user id\n  // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n  await updateLoggedInUserFollowing(activeUserDocId, profileUserId, isFollowingProfile);\n\n  // 1st param: karl's user id\n  // 2nd param: raphael's doc id\n  // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n  await updateFollowedUserFollowers(profileDocId, followingUserId, isFollowingProfile);\n}","map":{"version":3,"names":["firebase","FieldValue","doesUsernameExist","username","result","firestore","collection","where","toLowerCase","get","docs","length","getUserByUsername","map","item","data","docId","id","getUserByUserId","userId","user","getSuggestedProfiles","following","query","limit","profiles","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","doc","update","arrayRemove","arrayUnion","updateFollowedUserFollowers","profileDocId","followers","getPhotos","userFollowedPhotos","photo","photosWithUserDetails","Promise","all","userLikedPhoto","likes","includes","getUserPhotosByUserId","photos","isUserFollowingProfile","loggedInUserUsername","profileUserId","response","toggleFollow","activeUserDocId","followingUserId"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/services/firebase.js"],"sourcesContent":["import { firebase, FieldValue } from '../lib/firebase';\n\nexport async function doesUsernameExist(username) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username.toLowerCase())\n    .get();\n\n  return result.docs.length > 0;\n}\n\nexport async function getUserByUsername(username) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username.toLowerCase())\n    .get();\n\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n}\n\n// get user from the firestore where userId === userId (passed from the auth)\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n  const user = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n\n  return user;\n}\n\n// check all conditions before limit results\nexport async function getSuggestedProfiles(userId, following) {\n  let query = firebase.firestore().collection('users');\n\n  if (following.length > 0) {\n    query = query.where('userId', 'not-in', [...following, userId]);\n  } else {\n    query = query.where('userId', '!=', userId);\n  }\n  const result = await query.limit(10).get();\n\n  const profiles = result.docs.map((user) => ({\n    ...user.data(),\n    docId: user.id\n  }));\n\n  return profiles;\n}\n\nexport async function updateLoggedInUserFollowing(\n  loggedInUserDocId, // currently logged in user document id (karl's profile)\n  profileId, // the user that karl requests to follow\n  isFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(loggedInUserDocId)\n    .update({\n      following: isFollowingProfile ?\n        FieldValue.arrayRemove(profileId) :\n        FieldValue.arrayUnion(profileId)\n    });\n}\n\nexport async function updateFollowedUserFollowers(\n  profileDocId, // currently logged in user document id (karl's profile)\n  loggedInUserDocId, // the user that karl requests to follow\n  isFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(profileDocId)\n    .update({\n      followers: isFollowingProfile ?\n        FieldValue.arrayRemove(loggedInUserDocId) :\n        FieldValue.arrayUnion(loggedInUserDocId)\n    });\n}\n\nexport async function getPhotos(userId, following) {\n  // [5,4,2] => following\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', 'in', following)\n    .get();\n\n  const userFollowedPhotos = result.docs.map((photo) => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n\n  const photosWithUserDetails = await Promise.all(\n    userFollowedPhotos.map(async (photo) => {\n      let userLikedPhoto = false;\n      if (photo.likes.includes(userId)) {\n        userLikedPhoto = true;\n      }\n      // photo.userId = 2\n      const user = await getUserByUserId(photo.userId);\n      // raphael\n      const { username } = user[0];\n      return { username, ...photo, userLikedPhoto };\n    })\n  );\n\n  return photosWithUserDetails;\n}\n\nexport async function getUserPhotosByUserId(userId) {\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', '==', userId)\n    .get();\n\n  const photos = result.docs.map((photo) => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n  return photos;\n}\n\nexport async function isUserFollowingProfile(loggedInUserUsername, profileUserId) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', loggedInUserUsername) // karl (active logged in user)\n    .where('following', 'array-contains', profileUserId)\n    .get();\n\n  const [response = {}] = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n\n  return response.userId;\n}\n\nexport async function toggleFollow(\n  isFollowingProfile,\n  activeUserDocId,\n  profileDocId,\n  profileUserId,\n  followingUserId\n) {\n  // 1st param: karl's doc id\n  // 2nd param: raphael's user id\n  // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n  await updateLoggedInUserFollowing(activeUserDocId, profileUserId, isFollowingProfile);\n\n  // 1st param: karl's user id\n  // 2nd param: raphael's doc id\n  // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n  await updateFollowedUserFollowers(profileDocId, followingUserId, isFollowingProfile);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}