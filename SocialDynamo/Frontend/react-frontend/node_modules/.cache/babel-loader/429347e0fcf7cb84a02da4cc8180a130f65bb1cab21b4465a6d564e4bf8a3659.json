{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 12;\n\n// Function to generate mock data with random values\nconst generateMockData = count => {\n  // ... (same as before) ...\n};\nconst App = () => {\n  _s();\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    // Load initial data\n    const mockData = generateMockData(PAGE_SIZE);\n    setCoinsData(mockData);\n  }, []);\n  useEffect(() => {\n    const loadData = () => {\n      const mockData = generateMockData(PAGE_SIZE);\n      setCoinsData(prevData => [...prevData, ...mockData]);\n    };\n    const handleScroll = () => {\n      const windowHeight = window.innerHeight;\n      const scrollY = window.scrollY || window.pageYOffset;\n      const bodyHeight = document.body.offsetHeight;\n      if (scrollY + windowHeight >= bodyHeight) {\n        // Load more data when the scroll position reaches the bottom of the page\n        setPage(prev => prev + 1);\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crypto Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-list\",\n      children: coinsData.map(crypto => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crypto-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: crypto.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Symbol: \", crypto.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", crypto.current_price.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Market Cap: $\", crypto.market_cap.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, crypto.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"sA27a4eVQdpjo4Mgw7LkeOhGwDo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PAGE_SIZE","generateMockData","count","App","_s","coinsData","setCoinsData","page","setPage","mockData","loadData","prevData","handleScroll","windowHeight","window","innerHeight","scrollY","pageYOffset","bodyHeight","document","body","offsetHeight","prev","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","crypto","name","symbol","current_price","toFixed","market_cap","id","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n\n\nimport React, { useEffect, useState } from \"react\";\n\nconst PAGE_SIZE = 12;\n\n// Function to generate mock data with random values\nconst generateMockData = (count) => {\n  // ... (same as before) ...\n};\n\nconst App = () => {\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    // Load initial data\n    const mockData = generateMockData(PAGE_SIZE);\n    setCoinsData(mockData);\n  }, []);\n\n  useEffect(() => {\n    const loadData = () => {\n      const mockData = generateMockData(PAGE_SIZE);\n      setCoinsData((prevData) => [...prevData, ...mockData]);\n    };\n\n    const handleScroll = () => {\n      const windowHeight = window.innerHeight;\n      const scrollY = window.scrollY || window.pageYOffset;\n      const bodyHeight = document.body.offsetHeight;\n\n      if (scrollY + windowHeight >= bodyHeight) {\n        // Load more data when the scroll position reaches the bottom of the page\n        setPage((prev) => prev + 1);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Crypto Gallery</h1>\n      <div className=\"crypto-list\">\n        {coinsData.map((crypto) => (\n          <div key={crypto.id} className=\"crypto-item\">\n            <h3>{crypto.name}</h3>\n            <p>Symbol: {crypto.symbol}</p>\n            <p>Price: ${crypto.current_price.toFixed(2)}</p>\n            <p>Market Cap: ${crypto.market_cap.toFixed(2)}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAG,EAAE;;AAEpB;AACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC;AAAA,CACD;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,QAAQ,GAAGR,gBAAgB,CAACD,SAAS,CAAC;IAC5CM,YAAY,CAACG,QAAQ,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMD,QAAQ,GAAGR,gBAAgB,CAACD,SAAS,CAAC;MAC5CM,YAAY,CAAEK,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGF,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,YAAY,GAAGC,MAAM,CAACC,WAAW;MACvC,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACG,WAAW;MACpD,MAAMC,UAAU,GAAGC,QAAQ,CAACC,IAAI,CAACC,YAAY;MAE7C,IAAIL,OAAO,GAAGH,YAAY,IAAIK,UAAU,EAAE;QACxC;QACAV,OAAO,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MAC7B;IACF,CAAC;IAEDR,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAEX,YAAY,CAAC;IAE/C,OAAO,MAAME,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEZ,YAAY,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3B,OAAA;MAAA2B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB/B,OAAA;MAAK0B,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBrB,SAAS,CAAC0B,GAAG,CAAEC,MAAM,iBACpBjC,OAAA;QAAqB0B,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1C3B,OAAA;UAAA2B,QAAA,EAAKM,MAAM,CAACC;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtB/B,OAAA;UAAA2B,QAAA,GAAG,UAAQ,EAACM,MAAM,CAACE,MAAM;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9B/B,OAAA;UAAA2B,QAAA,GAAG,UAAQ,EAACM,MAAM,CAACG,aAAa,CAACC,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChD/B,OAAA;UAAA2B,QAAA,GAAG,eAAa,EAACM,MAAM,CAACK,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJ1CE,MAAM,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA/CID,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAiDT,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}