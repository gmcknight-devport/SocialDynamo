{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\util\\\\blob-to-image.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const BlobToImage = (props) => {\n//   const { byteArray } = props;\n//   let images = [];\n\n//   //Check if blobData is null or undefined\n//   if (byteArray === null || byteArray === undefined) {\n//     return null;\n//   }\n\n//   if (Array.isArray(byteArray)) {\n//     images = byteArray.map((byteData, index) => {\n//       const blob = new Blob([new Uint8Array(byteData)], { type: 'image/jpeg' });\n//       const imageUrl = URL.createObjectURL(blob);\n\n//       const img = new Image();\n//       img.src = imageUrl;\n\n//       let natWidth = 0;\n//       let natHeight = 0;\n\n//       img.onload = () => {\n//         natWidth = img.naturalWidth;\n//         natHeight = img.naturalHeight;\n//       }\n\n//       img.src = '';\n\n//       return <img key={index} src={imageUrl} alt={`Image ${index}`} width={natWidth} height={natHeight} />;      \n//     });\n//   } else {\n//     const blob = new Blob([new Uint8Array(byteArray)], { type: 'image/jpeg' });\n//     const imageUrl = URL.createObjectURL(blob);\n//     images.push(<img key={0} src={imageUrl} alt=\"Image\" />);\n//   }  \n//   return images;\n// }\n\n// export default BlobToImage;\n\nconst BlobToImage = props => {\n  const {\n    byteArray\n  } = props;\n  let images = [];\n\n  //Check if blobData is null or undefined\n  if (byteArray === null || byteArray === undefined) {\n    return null;\n  }\n  if (Array.isArray(byteArray)) {\n    images = byteArray.map((byteData, index) => {\n      const blob = new Blob([new Uint8Array(byteData)], {\n        type: 'image/jpeg'\n      });\n      const imageUrl = URL.createObjectURL(blob);\n      const img = new Image();\n      img.src = imageUrl;\n      let natWidth = 0;\n      let natHeight = 0;\n      img.onload = () => {\n        const natWidth = img.naturalWidth;\n        const natHeight = img.naturalHeight;\n        if (natWidth > largestWidth) {\n          setLargestWidth(natWidth);\n        }\n        if (natHeight > largestHeight) {\n          setLargestHeight(natHeight);\n        }\n      };\n      images.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: `Image ${index}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this));\n      img.src = '';\n    });\n  } else {\n    const blob = new Blob([new Uint8Array(byteArray)], {\n      type: 'image/jpeg'\n    });\n    const imageUrl = URL.createObjectURL(blob);\n    images.push( /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageUrl,\n      alt: \"Image\"\n    }, 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this));\n  }\n  return images, natWidth, natHeight;\n};\n_c = BlobToImage;\nexport default BlobToImage;\nvar _c;\n$RefreshReg$(_c, \"BlobToImage\");","map":{"version":3,"names":["BlobToImage","props","byteArray","images","undefined","Array","isArray","map","byteData","index","blob","Blob","Uint8Array","type","imageUrl","URL","createObjectURL","img","Image","src","natWidth","natHeight","onload","naturalWidth","naturalHeight","largestWidth","setLargestWidth","largestHeight","setLargestHeight","push","_jsxDEV","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/util/blob-to-image.js"],"sourcesContent":["// const BlobToImage = (props) => {\r\n//   const { byteArray } = props;\r\n//   let images = [];\r\n\r\n//   //Check if blobData is null or undefined\r\n//   if (byteArray === null || byteArray === undefined) {\r\n//     return null;\r\n//   }\r\n\r\n//   if (Array.isArray(byteArray)) {\r\n//     images = byteArray.map((byteData, index) => {\r\n//       const blob = new Blob([new Uint8Array(byteData)], { type: 'image/jpeg' });\r\n//       const imageUrl = URL.createObjectURL(blob);\r\n\r\n//       const img = new Image();\r\n//       img.src = imageUrl;\r\n\r\n//       let natWidth = 0;\r\n//       let natHeight = 0;\r\n\r\n//       img.onload = () => {\r\n//         natWidth = img.naturalWidth;\r\n//         natHeight = img.naturalHeight;\r\n//       }\r\n\r\n//       img.src = '';\r\n\r\n//       return <img key={index} src={imageUrl} alt={`Image ${index}`} width={natWidth} height={natHeight} />;      \r\n//     });\r\n//   } else {\r\n//     const blob = new Blob([new Uint8Array(byteArray)], { type: 'image/jpeg' });\r\n//     const imageUrl = URL.createObjectURL(blob);\r\n//     images.push(<img key={0} src={imageUrl} alt=\"Image\" />);\r\n//   }  \r\n//   return images;\r\n// }\r\n\r\n// export default BlobToImage;\r\n\r\n\r\n\r\nconst BlobToImage = (props) => {\r\n  const { byteArray } = props;\r\n  let images = [];\r\n\r\n  //Check if blobData is null or undefined\r\n  if (byteArray === null || byteArray === undefined) {\r\n    return null;\r\n  }\r\n\r\n  if (Array.isArray(byteArray)) {\r\n    images = byteArray.map((byteData, index) => {\r\n      const blob = new Blob([new Uint8Array(byteData)], { type: 'image/jpeg' });\r\n      const imageUrl = URL.createObjectURL(blob);\r\n\r\n      const img = new Image();\r\n      img.src = imageUrl;\r\n\r\n      let natWidth = 0;\r\n      let natHeight = 0;\r\n\r\n      img.onload = () => {\r\n        const natWidth = img.naturalWidth;\r\n        const natHeight = img.naturalHeight;\r\n\r\n        if (natWidth > largestWidth) {\r\n          setLargestWidth(natWidth);\r\n        }\r\n\r\n        if (natHeight > largestHeight) {\r\n          setLargestHeight(natHeight);\r\n        }\r\n      };\r\n\r\n      images.push(\r\n        <img\r\n          key={index}\r\n          src={imageUrl}\r\n          alt={`Image ${index}`}\r\n        />\r\n      );\r\n      img.src = '';\r\n      \r\n    });\r\n  } else {\r\n    const blob = new Blob([new Uint8Array(byteArray)], { type: 'image/jpeg' });\r\n    const imageUrl = URL.createObjectURL(blob);\r\n    images.push(<img key={0} src={imageUrl} alt=\"Image\" />);\r\n  }  \r\n  return images, natWidth, natHeight;\r\n}\r\n\r\nexport default BlobToImage;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,MAAMA,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC;EAAU,CAAC,GAAGD,KAAK;EAC3B,IAAIE,MAAM,GAAG,EAAE;;EAEf;EACA,IAAID,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKE,SAAS,EAAE;IACjD,OAAO,IAAI;EACb;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,EAAE;IAC5BC,MAAM,GAAGD,SAAS,CAACK,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MAC1C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACJ,QAAQ,CAAC,CAAC,EAAE;QAAEK,IAAI,EAAE;MAAa,CAAC,CAAC;MACzE,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;MAE1C,MAAMO,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,GAAG,GAAGL,QAAQ;MAElB,IAAIM,QAAQ,GAAG,CAAC;MAChB,IAAIC,SAAS,GAAG,CAAC;MAEjBJ,GAAG,CAACK,MAAM,GAAG,MAAM;QACjB,MAAMF,QAAQ,GAAGH,GAAG,CAACM,YAAY;QACjC,MAAMF,SAAS,GAAGJ,GAAG,CAACO,aAAa;QAEnC,IAAIJ,QAAQ,GAAGK,YAAY,EAAE;UAC3BC,eAAe,CAACN,QAAQ,CAAC;QAC3B;QAEA,IAAIC,SAAS,GAAGM,aAAa,EAAE;UAC7BC,gBAAgB,CAACP,SAAS,CAAC;QAC7B;MACF,CAAC;MAEDlB,MAAM,CAAC0B,IAAI,eACTC,OAAA;QAEEX,GAAG,EAAEL,QAAS;QACdiB,GAAG,EAAG,SAAQtB,KAAM;MAAE,GAFjBA,KAAK;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACH,CAAC;MACDlB,GAAG,CAACE,GAAG,GAAG,EAAE;IAEd,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAMT,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACV,SAAS,CAAC,CAAC,EAAE;MAAEW,IAAI,EAAE;IAAa,CAAC,CAAC;IAC1E,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IAC1CP,MAAM,CAAC0B,IAAI,eAACC,OAAA;MAAaX,GAAG,EAAEL,QAAS;MAACiB,GAAG,EAAC;IAAO,GAA7B,CAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA8B,CAAC,CAAC;EACzD;EACA,OAAOhC,MAAM,EAAEiB,QAAQ,EAAEC,SAAS;AACpC,CAAC;AAAAe,EAAA,GAjDKpC,WAAW;AAmDjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}