{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n//Should display 5 user profile, using just user header\n//Should display 5 posts from the hashtag search\n\n//Design\n//\n//Search bar at top, search button (also allow Enter to search)\n//Results below, line to split sections, maybe titles??\n\n//api calls to search users, then done in User Profile Header. Check what's returned from query. \n//api calls to search posts, then done as posts? Check what is returned from query.\n//DOES THE AGGREGATOR DO THIS??\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState({\n    users: [],\n    posts: []\n  });\n  const handleSearch = async () => {\n    // Perform API calls based on the searchTerm\n    // Update the searchResults state with the fetched data\n    // Example:\n    // const users = await fetchUsers(searchTerm);\n    // const posts = await fetchPosts(searchTerm);\n    // setSearchResults({ users, posts });\n  };\n  const searchApiCall = async () => {\n    //Send data              \n    const response = await fetch(`http://20.49.168.20:80/search/${searchTerm}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    //Map data\n    //Returns uers first (userId, forename, surname, profilepicture)\n    //Returns posts second, regular post mapping?\n    //Need to be split and then processed into variables. \n\n    const data = await response.json();\n\n    //Map response and update\n    const processedData = post.likes.map((item, index) => ({\n      userId: item.LikeUserId,\n      name: data[index].forename + ' ' + data[index].surname,\n      profilePictureBlob: data[index].profilePictureBlob\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {}, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {}, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"4prxMoOqmqJt67Wrt/Vw4U+KnCQ=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Search","_s","searchTerm","setSearchTerm","searchResults","setSearchResults","users","posts","handleSearch","searchApiCall","response","fetch","method","headers","data","json","processedData","post","likes","map","item","index","userId","LikeUserId","name","forename","surname","profilePictureBlob","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","user","id","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/search.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n//Should display 5 user profile, using just user header\r\n//Should display 5 posts from the hashtag search\r\n\r\n//Design\r\n//\r\n//Search bar at top, search button (also allow Enter to search)\r\n//Results below, line to split sections, maybe titles??\r\n\r\n//api calls to search users, then done in User Profile Header. Check what's returned from query. \r\n//api calls to search posts, then done as posts? Check what is returned from query.\r\n//DOES THE AGGREGATOR DO THIS??\r\n\r\nconst Search = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchResults, setSearchResults] = useState({ users: [], posts: [] });\r\n\r\n  const handleSearch = async () => {\r\n    // Perform API calls based on the searchTerm\r\n    // Update the searchResults state with the fetched data\r\n    // Example:\r\n    // const users = await fetchUsers(searchTerm);\r\n    // const posts = await fetchPosts(searchTerm);\r\n    // setSearchResults({ users, posts });\r\n  };\r\n\r\n  const searchApiCall = async () => {\r\n    //Send data              \r\n    const response = await fetch(`http://20.49.168.20:80/search/${searchTerm}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n\r\n    //Map data\r\n    //Returns uers first (userId, forename, surname, profilepicture)\r\n    //Returns posts second, regular post mapping?\r\n    //Need to be split and then processed into variables. \r\n\r\n\r\n\r\n\r\n    const data = await response.json();\r\n\r\n    //Map response and update\r\n    const processedData = post.likes.map((item, index) => ({\r\n      userId: item.LikeUserId,\r\n      name: data[index].forename + ' ' + data[index].surname,\r\n      profilePictureBlob: data[index].profilePictureBlob\r\n    }));      \r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Search Page</h1>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      <hr />\r\n      <div>\r\n        <h2>Users</h2>\r\n        <ul>\r\n          {searchResults.users.map((user) => (\r\n            <li key={user.id}>{/* Render individual user items here */}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h2>Posts</h2>\r\n        <ul>\r\n          {searchResults.posts.map((post) => (\r\n            <li key={post.id}>{/* Render individual post items here */}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}