{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\nimport React, { useState, useEffect } from 'react';\nimport InfiniteScroll from '../components/infinitescroll';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 20; // Number of items per page\n\nconst generateRandomData = count => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const item = {\n      id: i + 1,\n      // Assuming IDs start from 1\n      name: `Item ${i + 1}`,\n      description: `Description for Item ${i + 1}`\n    };\n    data.push(item);\n  }\n  return data;\n};\nconst TestPage = () => {\n  _s();\n  // Simulated in-memory paginated dataset\n  const [mockData, setMockData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const containerRef = useRef(); // Ref for the scroll container\n\n  // Function to generate random data for a given page number\n  const generatePageData = page => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call delay\n    setTimeout(() => {\n      const startIndex = (page - 1) * PAGE_SIZE;\n      const endIndex = startIndex + PAGE_SIZE;\n      const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n        ...item,\n        id: startIndex + index + 1\n      }));\n      setMockData(prevData => [...prevData, ...newData]);\n      setCurrentPage(prevPage => prevPage + 1);\n      setLoading(false);\n    }, 1000); // Simulate API call delay of 1 second\n  };\n\n  // Function to simulate loading more data for pagination when scrolling\n  const loadMoreData = () => {\n    generatePageData(currentPage);\n  };\n\n  // Function to handle the scroll event on the container element\n  const handleScroll = () => {\n    const container = containerRef.current;\n    if (container) {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = container;\n      if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n        // Load more data when the user has scrolled near the bottom and not already loading\n        loadMoreData();\n      }\n    }\n  };\n\n  // Add the scroll event listener when the component mounts\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener('scroll', handleScroll);\n    }\n\n    // Remove the scroll event listener when the component unmounts\n    return () => {\n      if (container) {\n        container.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n  // Load initial data when the component mounts\n  useEffect(() => {\n    generatePageData(1);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      data: mockData,\n      loading: loading,\n      error: error,\n      onLoadMore: loadMoreData,\n      renderData: renderData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"lw2FUg7Pg8XoYFWTbyrXMl3dSc8=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","useEffect","InfiniteScroll","jsxDEV","_jsxDEV","PAGE_SIZE","generateRandomData","count","data","i","item","id","name","description","push","TestPage","_s","mockData","setMockData","loading","setLoading","error","setError","currentPage","setCurrentPage","containerRef","useRef","generatePageData","page","setTimeout","startIndex","endIndex","newData","map","index","prevData","prevPage","loadMoreData","handleScroll","container","current","scrollTop","scrollHeight","clientHeight","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","onLoadMore","renderData","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\nimport React, { useState, useEffect } from 'react';\nimport InfiniteScroll from '../components/infinitescroll';\n\nconst PAGE_SIZE = 20; // Number of items per page\n\nconst generateRandomData = (count) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const item = {\n      id: i + 1, // Assuming IDs start from 1\n      name: `Item ${i + 1}`,\n      description: `Description for Item ${i + 1}`,\n    };\n    data.push(item);\n  }\n  return data;\n};\n\nconst TestPage = () => {\n  // Simulated in-memory paginated dataset\n  const [mockData, setMockData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const containerRef = useRef(); // Ref for the scroll container\n\n  // Function to generate random data for a given page number\n  const generatePageData = (page) => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call delay\n    setTimeout(() => {\n      const startIndex = (page - 1) * PAGE_SIZE;\n      const endIndex = startIndex + PAGE_SIZE;\n      const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n        ...item,\n        id: startIndex + index + 1,\n      }));\n\n      setMockData((prevData) => [...prevData, ...newData]);\n      setCurrentPage((prevPage) => prevPage + 1);\n      setLoading(false);\n    }, 1000); // Simulate API call delay of 1 second\n  };\n\n  // Function to simulate loading more data for pagination when scrolling\n  const loadMoreData = () => {\n    generatePageData(currentPage);\n  };\n\n  // Function to handle the scroll event on the container element\n  const handleScroll = () => {\n    const container = containerRef.current;\n    if (container) {\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n        // Load more data when the user has scrolled near the bottom and not already loading\n        loadMoreData();\n      }\n    }\n  };\n\n  // Add the scroll event listener when the component mounts\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener('scroll', handleScroll);\n    }\n\n    // Remove the scroll event listener when the component unmounts\n    return () => {\n      if (container) {\n        container.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n  // Load initial data when the component mounts\n  useEffect(() => {\n    generatePageData(1);\n  }, []);\n\n  return (\n    <div>\n      <h1>Test Page</h1>\n      <InfiniteScroll\n        data={mockData}\n        loading={loading}\n        error={error}\n        onLoadMore={loadMoreData}\n        renderData={renderData}\n      />\n    </div>\n  );\n};\n\nexport default TestPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}