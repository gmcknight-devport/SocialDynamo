{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n\n  // Simulated function to generate test data\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    return testData;\n  };\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //\n  //THIS ONE WORKS!!!!\n  //\n  useLayoutEffect(() => {\n    let iterations = 0;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData(prevData => [...prevData, ...newData]);\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n  useLayoutEffect(() => {\n    // Function to handle scroll event and load more data\n    const handleScroll = () => {\n      // Check if the user has reached the bottom of the container\n      if (containerRef.current.scrollTop + containerRef.current.clientHeight >= containerRef.current.scrollHeight) {\n        // Load more data when the user has scrolled to the bottom\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData(prevData => [...prevData, ...newData]);\n      }\n    };\n\n    // Attach the scroll event listener to the container\n    containerRef.current.addEventListener('scroll', handleScroll);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      containerRef.current.removeEventListener('scroll', handleScroll);\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      height: '400px',\n      overflow: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"3eaEt5eL75En6IWE3UB4AjqydVo=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","useRef","jsxDEV","_jsxDEV","TestData","_s","data","setData","containerHeight","setContainerHeight","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","generateTestData","numberOfPoints","testData","i","push","id","name","setTimeout","current","clientHeight","iterations","initialDataIteration","console","log","currentPage","Math","ceil","length","startIndex","endIndex","newData","prevData","requestAnimationFrame","handleScroll","scrollTop","scrollHeight","addEventListener","removeEventListener","ref","style","height","overflow","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n\n  // Simulated function to generate test data\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    return testData;\n  };\n\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //\n  //THIS ONE WORKS!!!!\n  //\n  useLayoutEffect(() => {\n    let iterations = 0;\n\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData((prevData) => [...prevData, ...newData]);\n\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  useLayoutEffect(() => {\n    // Function to handle scroll event and load more data\n    const handleScroll = () => {\n      // Check if the user has reached the bottom of the container\n      if (containerRef.current.scrollTop + containerRef.current.clientHeight >= containerRef.current.scrollHeight) {\n        // Load more data when the user has scrolled to the bottom\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData((prevData) => [...prevData, ...newData]);\n      }\n    };\n\n    // Attach the scroll event listener to the container\n    containerRef.current.addEventListener('scroll', handleScroll);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      containerRef.current.removeEventListener('scroll', handleScroll);\n    };\n  }, [data]);\n\n  return (\n    <div ref={containerRef} style={{ height: '400px', overflow: 'auto' }}>\n      {/* Add some styles to the container to enable scrolling */}\n      <h1>Test Data</h1>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAMY,YAAY,GAAGT,MAAM,CAAC,CAAC;EAC7B,MAAMU,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,aAAa,GAAG,EAAE,CAAC,CAAC;EAC1B,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,WAAW;;EAE/C;EACA,MAAMC,gBAAgB,GAAIC,cAAc,IAAK;IAC3C,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,cAAc,EAAEE,CAAC,EAAE,EAAE;MACxCD,QAAQ,CAACE,IAAI,CAAC;QAAEC,EAAE,EAAEF,CAAC;QAAEG,IAAI,EAAG,cAAaH,CAAE;MAAE,CAAC,CAAC;IACnD;IACA,OAAOD,QAAQ;EACjB,CAAC;EAEDlB,eAAe,CAAC,MAAM;IACpB;IACAuB,UAAU,CAAC,MAAM;MACf,IAAIb,YAAY,CAACc,OAAO,EAAE;QACxBf,kBAAkB,CAACC,YAAY,CAACc,OAAO,CAACC,YAAY,CAAC;MACvD;IACF,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACAzB,eAAe,CAAC,MAAM;IACpB,IAAI0B,UAAU,GAAG,CAAC;IAElB,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;MACjC,IAAIjB,YAAY,CAACc,OAAO,CAACC,YAAY,GAAGZ,oBAAoB,EAAE;QAC5De,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B,OAAO,CAAC;MACV;;MAEA,IAAIH,UAAU,IAAId,aAAa,EAAE;QAC/BgB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C,OAAO,CAAC;MACV;;MAEA,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAAC1B,IAAI,CAAC2B,MAAM,GAAGtB,QAAQ,CAAC,GAAG,CAAC;MACzD,MAAMuB,UAAU,GAAG,CAACJ,WAAW,GAAG,CAAC,IAAInB,QAAQ;MAC/C,MAAMwB,QAAQ,GAAGD,UAAU,GAAGvB,QAAQ;MACtC,MAAMyB,OAAO,GAAGpB,gBAAgB,CAACmB,QAAQ,CAAC,CAAC,CAAC;MAC5C5B,OAAO,CAAE8B,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGD,OAAO,CAAC,CAAC;MAEhDR,OAAO,CAACC,GAAG,CAAE,cAAaH,UAAW,EAAC,CAAC;MACvCA,UAAU,EAAE;MAEZY,qBAAqB,CAACX,oBAAoB,CAAC,CAAC,CAAC;IAC/C,CAAC;;IAEDW,qBAAqB,CAACX,oBAAoB,CAAC,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACnB,eAAe,CAAC,CAAC;EAErBR,eAAe,CAAC,MAAM;IACpB;IACA,MAAMuC,YAAY,GAAGA,CAAA,KAAM;MACzB;MACA,IAAI7B,YAAY,CAACc,OAAO,CAACgB,SAAS,GAAG9B,YAAY,CAACc,OAAO,CAACC,YAAY,IAAIf,YAAY,CAACc,OAAO,CAACiB,YAAY,EAAE;QAC3G;QACA,MAAMX,WAAW,GAAGC,IAAI,CAACC,IAAI,CAAC1B,IAAI,CAAC2B,MAAM,GAAGtB,QAAQ,CAAC,GAAG,CAAC;QACzD,MAAMuB,UAAU,GAAG,CAACJ,WAAW,GAAG,CAAC,IAAInB,QAAQ;QAC/C,MAAMwB,QAAQ,GAAGD,UAAU,GAAGvB,QAAQ;QACtC,MAAMyB,OAAO,GAAGpB,gBAAgB,CAACmB,QAAQ,CAAC,CAAC,CAAC;QAC5C5B,OAAO,CAAE8B,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGD,OAAO,CAAC,CAAC;MAClD;IACF,CAAC;;IAED;IACA1B,YAAY,CAACc,OAAO,CAACkB,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE7D;IACA,OAAO,MAAM;MACX7B,YAAY,CAACc,OAAO,CAACmB,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IAClE,CAAC;EACH,CAAC,EAAE,CAACjC,IAAI,CAAC,CAAC;EAEV,oBACEH,OAAA;IAAKyC,GAAG,EAAElC,YAAa;IAACmC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAEnE7C,OAAA;MAAA6C,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBjD,OAAA;MAAA6C,QAAA,EACG1C,IAAI,CAAC+C,GAAG,CAAEC,IAAI,iBACbnD,OAAA;QAAA6C,QAAA,EAAmBM,IAAI,CAAChC;MAAI,GAAnBgC,IAAI,CAACjC,EAAE;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC/C,EAAA,CA5FID,QAAQ;AAAAmD,EAAA,GAARnD,QAAQ;AA8Fd,eAAeA,QAAQ;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}