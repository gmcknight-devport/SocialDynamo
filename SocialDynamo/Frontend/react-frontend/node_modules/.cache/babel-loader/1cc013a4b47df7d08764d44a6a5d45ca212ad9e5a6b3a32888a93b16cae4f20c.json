{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 3;\n\n// Function to generate mock data with random values\nconst generateMockData = count => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000,\n      // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000 // Random market cap between 0 and 1 billion\n    });\n  }\n\n  return mockData;\n};\nconst App = () => {\n  _s();\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [endOfData, setEndOfData] = useState(false);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const loadData = () => {\n      const mockData = generateMockData(PAGE_SIZE * page);\n      setCoinsData(prevData => [...prevData, ...mockData]);\n    };\n    const handleScroll = () => {\n      if (endOfData) return;\n      const container = containerRef.current;\n      const scrollHeight = container.scrollHeight;\n      const clientHeight = container.clientHeight;\n      const scrollTop = container.scrollTop;\n\n      // Check if we have reached the bottom of the container\n      if (scrollTop + clientHeight >= scrollHeight - 50) {\n        setPage(prev => prev + 1);\n      }\n    };\n    loadData(); // Load initial data\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [page, endOfData]);\n  useEffect(() => {\n    if (endOfData) {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [endOfData]);\n  useEffect(() => {\n    const container = containerRef.current;\n    const handleResize = () => {\n      const scrollHeight = container.scrollHeight;\n      const clientHeight = container.clientHeight;\n      const scrollTop = container.scrollTop;\n\n      // Check if we have reached the bottom of the container\n      if (scrollTop + clientHeight >= scrollHeight - 50) {\n        setPage(prev => prev + 1);\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crypto Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-list\",\n      ref: containerRef,\n      children: coinsData.map(crypto => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crypto-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: crypto.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Symbol: \", crypto.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", crypto.current_price.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Market Cap: $\", crypto.market_cap.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, crypto.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), endOfData ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"End of Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"YWHvQWKgPp1f1PmyFooapWG8h3Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","PAGE_SIZE","generateMockData","count","mockData","i","push","id","name","symbol","current_price","Math","random","market_cap","App","_s","coinsData","setCoinsData","page","setPage","endOfData","setEndOfData","containerRef","loadData","prevData","handleScroll","container","current","scrollHeight","clientHeight","scrollTop","prev","window","addEventListener","removeEventListener","handleResize","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","crypto","toFixed","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n\n\nimport React, { useEffect, useState, useRef } from \"react\";\n\nconst PAGE_SIZE = 3;\n\n// Function to generate mock data with random values\nconst generateMockData = (count) => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000, // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000, // Random market cap between 0 and 1 billion\n    });\n  }\n  return mockData;\n};\n\nconst App = () => {\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [endOfData, setEndOfData] = useState(false);\n\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const loadData = () => {\n      const mockData = generateMockData(PAGE_SIZE * page);\n      setCoinsData((prevData) => [...prevData, ...mockData]);\n    };\n\n    const handleScroll = () => {\n      if (endOfData) return;\n\n      const container = containerRef.current;\n      const scrollHeight = container.scrollHeight;\n      const clientHeight = container.clientHeight;\n      const scrollTop = container.scrollTop;\n\n      // Check if we have reached the bottom of the container\n      if (scrollTop + clientHeight >= scrollHeight - 50) {\n        setPage((prev) => prev + 1);\n      }\n    };\n\n    loadData(); // Load initial data\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [page, endOfData]);\n\n  useEffect(() => {\n    if (endOfData) {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [endOfData]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const handleResize = () => {\n      const scrollHeight = container.scrollHeight;\n      const clientHeight = container.clientHeight;\n      const scrollTop = container.scrollTop;\n\n      // Check if we have reached the bottom of the container\n      if (scrollTop + clientHeight >= scrollHeight - 50) {\n        setPage((prev) => prev + 1);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Crypto Gallery</h1>\n      <div className=\"crypto-list\" ref={containerRef}>\n        {coinsData.map((crypto) => (\n          <div key={crypto.id} className=\"crypto-item\">\n            <h3>{crypto.name}</h3>\n            <p>Symbol: {crypto.symbol}</p>\n            <p>Price: ${crypto.current_price.toFixed(2)}</p>\n            <p>Market Cap: ${crypto.market_cap.toFixed(2)}</p>\n          </div>\n        ))}\n      </div>\n      {endOfData ? <p>End of Data</p> : <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,SAAS,GAAG,CAAC;;AAEnB;AACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9BD,QAAQ,CAACE,IAAI,CAAC;MACZC,EAAE,EAAEF,CAAC,GAAG,CAAC;MACTG,IAAI,EAAG,UAASH,CAAC,GAAG,CAAE,EAAC;MACvBI,MAAM,EAAG,OAAMJ,CAAC,GAAG,CAAE,EAAC;MACtBK,aAAa,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI;MAAE;MACrCC,UAAU,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAE;IAC1C,CAAC,CAAC;EACJ;;EACA,OAAOR,QAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}