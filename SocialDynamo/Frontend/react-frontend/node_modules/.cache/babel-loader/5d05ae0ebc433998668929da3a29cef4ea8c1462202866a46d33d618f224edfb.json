{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Documents\\\\GitHub\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\nimport Post from '../components/post/post';\nimport SideNav from '../components/sidebar/sidenav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_NUMBER = 1;\nvar currPage = 1;\nconst Dashboard = () => {\n  _s();\n  var _JSON$parse;\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n  const ipAddress = ((_JSON$parse = JSON.parse(sessionStorage.getItem('ipAddress'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.ipAddress) || null;\n  useEffect(() => {\n    document.title = 'Dashboard - Social Dynamo';\n  }, []);\n  const getPosts = async () => {\n    var _JSON$parse2;\n    // const userId = JSON.parse(sessionStorage.getItem('userId'))?.userId || null;\n    // //Fetch data\n    // const response = await fetch(ipAddress + `/account/Profile/${userId}`, {\n    //   method: 'GET',\n    //   mode: 'cors',\n    //   credentials: 'include',\n    //   headers: {\n    //       'Content-Type': 'application/json',\n    //   },\n    // });\n\n    // //Handle different responses\n    // const dataWrapper = await response.json();\n    // const { statusCode, data } = dataWrapper;\n\n    // console.log(\"Status code in method of dash is: \" + statusCode);\n\n    // if (statusCode === 200) {\n    //   console.log(\"Success\")     \n    // } else if (statusCode === 401){\n    //   RefreshLogin();\n\n    // } else {\n    //   console.log(\"Failed\")\n    // }\n\n    const userId = ((_JSON$parse2 = JSON.parse(sessionStorage.getItem('userId'))) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.userId) || null;\n    console.log(\"ID in session storage in dashboard is: \" + userId);\n\n    //Fetch data\n    const postResponse = await fetch(ipAddress + `/baseaggregate/feed/${userId}/${currPage}`, {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(\"Should've fetched\");\n    const responseJson = await postResponse.json();\n    console.log(\"Converted to JSON\");\n    console.log(\"Status: \" + postResponse.status);\n\n    //Handle different responses\n    if (postResponse.ok) {\n      setData(prevFiles => [...prevFiles, responseJson.value]);\n      setPage(page + 1);\n    } else if (postResponse.status === 401) {\n      RefreshLogin();\n      getPosts();\n    } else if (postResponse.status === 400) {} else {\n      setResultsEnd(true);\n    }\n    currPage++;\n  };\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //Load data until it exceeds length of the page\n  useLayoutEffect(() => {\n    let iterations = 0;\n    const maxIterations = 5;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight || resultsEnd || iterations > maxIterations) return;\n      getPosts();\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n  //Infinite scrolling logic\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrollingToBottom && !loading && !resultsEnd) {\n      setLoading(true);\n      getPosts();\n      setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(SideNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), data.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Post, {\n        post: item[index]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }, this);\n    }), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }, this), resultsEnd && \"No More Posts\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"PgoDiJjBh45EyoHzfw8HivCw9OA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","useRef","LoadingSpinner","Post","SideNav","jsxDEV","_jsxDEV","PAGE_NUMBER","currPage","Dashboard","_s","_JSON$parse","data","setData","containerHeight","setContainerHeight","containerRef","originalWindowHeight","window","innerHeight","page","setPage","loading","setLoading","resultsEnd","setResultsEnd","ipAddress","JSON","parse","sessionStorage","getItem","document","title","getPosts","_JSON$parse2","userId","console","log","postResponse","fetch","method","mode","credentials","headers","responseJson","json","status","ok","prevFiles","value","RefreshLogin","setTimeout","current","clientHeight","iterations","maxIterations","initialDataIteration","requestAnimationFrame","handleScroll","isScrollingToBottom","documentElement","scrollTop","scrollHeight","addEventListener","removeEventListener","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","post","_c","$RefreshReg$"],"sources":["C:/Users/glenn/Documents/GitHub/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\nimport Post from '../components/post/post';\nimport SideNav from '../components/sidebar/sidenav'; \n\nconst PAGE_NUMBER = 1;\nvar currPage = 1;\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n  const ipAddress = JSON.parse(sessionStorage.getItem('ipAddress'))?.ipAddress || null;\n\n  useEffect(() => {\n    document.title = 'Dashboard - Social Dynamo';\n  }, []);\n\n  const getPosts = async () => {\n\n        // const userId = JSON.parse(sessionStorage.getItem('userId'))?.userId || null;\n        // //Fetch data\n        // const response = await fetch(ipAddress + `/account/Profile/${userId}`, {\n        //   method: 'GET',\n        //   mode: 'cors',\n        //   credentials: 'include',\n        //   headers: {\n        //       'Content-Type': 'application/json',\n        //   },\n        // });\n\n        // //Handle different responses\n        // const dataWrapper = await response.json();\n        // const { statusCode, data } = dataWrapper;\n\n        // console.log(\"Status code in method of dash is: \" + statusCode);\n\n\n        // if (statusCode === 200) {\n        //   console.log(\"Success\")     \n        // } else if (statusCode === 401){\n        //   RefreshLogin();\n          \n        // } else {\n        //   console.log(\"Failed\")\n        // }\n\n\n\n\n\n    const userId = JSON.parse(sessionStorage.getItem('userId'))?.userId || null;\n    console.log(\"ID in session storage in dashboard is: \" + userId);\n\n    //Fetch data\n    const postResponse = await fetch(ipAddress + `/baseaggregate/feed/${userId}/${currPage}`, {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    console.log(\"Should've fetched\");\n    const responseJson = await postResponse.json();\n    console.log(\"Converted to JSON\");\n    console.log(\"Status: \" + postResponse.status);\n\n    //Handle different responses\n    if (postResponse.ok) {\n      \n      setData((prevFiles) => [...prevFiles, responseJson.value]);\n      setPage(page + 1);\n\n    } else if (postResponse.status === 401){\n      RefreshLogin();\n      getPosts();\n    }else if(postResponse.status === 400){\n\n    }\n    else {\n      setResultsEnd(true);\n    }\n\n    currPage++\n  };\n\n  useLayoutEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //Load data until it exceeds length of the page\n  useLayoutEffect(() => {\n    let iterations = 0;    \n    const maxIterations = 5;\n\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight || resultsEnd || iterations > maxIterations) return;\n      \n      getPosts();\n\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n    };\n\n    requestAnimationFrame(initialDataIteration); // Start the loop\n  }, [containerHeight]);\n\n//Infinite scrolling logic\nconst handleScroll = () => {\n  const isScrollingToBottom =\n    window.innerHeight + document.documentElement.scrollTop + 1 >=\n    document.documentElement.scrollHeight\n\n  if (isScrollingToBottom && !loading && !resultsEnd) {\n    setLoading(true);\n\n    getPosts();\n    \n    setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n  }\n};\n\nuseLayoutEffect(() => {\n  window.addEventListener('scroll', handleScroll);\n  return () => window.removeEventListener('scroll', handleScroll);\n}, []);\n\n  return (\n    <div ref={containerRef}>   \n      <SideNav/>\n      {data.map((item, index) => {\n          return (\n              <Post key={index} post={item[index]} />\n          );\n      })}\n      {loading && <LoadingSpinner />}\n      {resultsEnd && \"No More Posts\"}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}