{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const PAGE_NUMBER = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     setLoading(false);\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Scroll logic\n//   useEffect(() => {\n//     setTimeout(async () => {\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//        setLoading(false);\n//     }, 1500);\n// }, [page]);\n\n// useEffect(() => {\n//     window.addEventListener(\"scroll\", handleScroll);\n\n//     return () => window.removeEventListener(\"scroll\", handleScroll);\n// }, []);\n\n// const handleScroll = async () => {\n//     if (\n//         window.innerHeight + document.documentElement.scrollTop + 1 >=\n//         document.documentElement.scrollHeight\n//     ) {\n//         setLoading(true);\n//         setPage((prev) => prev + 1);\n//     }\n// };\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_NUMBER = 1;\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n\n  // Simulated function to generate test data\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    setLoading(false);\n    return testData;\n  };\n  useEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //\n  //THIS ONE WORKS!!!!\n  //\n  useEffect(() => {\n    let iterations = 0;\n    let isStarted = false;\n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData(prevData => [...prevData, ...newData]);\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n      console.log(\"Is in init loop\");\n    };\n    if (!isStarted) {\n      requestAnimationFrame(initialDataIteration); // Start the loop\n    }\n  }, [containerHeight]);\n\n  //   //Scroll logic\n  //   useEffect(() => {\n  //     setTimeout(async () => {\n  //       const currentPage = Math.ceil(data.length / pageSize) + 1;\n  //       const startIndex = (currentPage - 1) * pageSize;\n  //       const endIndex = startIndex + pageSize;\n  //       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n  //       setData((prevData) => [...prevData, ...newData]);\n  //       //setData((prevData) => [...newData]);\n\n  //        setLoading(false);\n  //     }, 1500);\n  // }, [page]);\n\n  // useEffect(() => {\n  //     window.addEventListener(\"scroll\", handleScroll);\n\n  //     return () => window.removeEventListener(\"scroll\", handleScroll);\n  // }, []);\n\n  // const handleScroll = async () => {\n  //     if (\n  //         window.innerHeight + document.documentElement.scrollTop + 1 >=\n  //         document.documentElement.scrollHeight\n  //     ) {\n  //         setLoading(true);\n  //         setPage((prev) => prev + 1);\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"tmhYflvuEMhKzuecsEo++Ibw+p8=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","useRef","jsxDEV","_jsxDEV","PAGE_NUMBER","TestData","_s","data","setData","containerHeight","setContainerHeight","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","page","setPage","loading","setLoading","generateTestData","numberOfPoints","testData","i","push","id","name","setTimeout","current","clientHeight","iterations","isStarted","initialDataIteration","console","log","currentPage","Math","ceil","length","startIndex","endIndex","newData","prevData","requestAnimationFrame","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\n// const PAGE_NUMBER = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n\n  \n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n//     setLoading(false);\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   //\n//   //THIS ONE WORKS!!!!\n//   //\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n\n  \n//   //Scroll logic\n//   useEffect(() => {\n//     setTimeout(async () => {\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n\n//        setLoading(false);\n//     }, 1500);\n// }, [page]);\n\n// useEffect(() => {\n//     window.addEventListener(\"scroll\", handleScroll);\n\n//     return () => window.removeEventListener(\"scroll\", handleScroll);\n// }, []);\n\n// const handleScroll = async () => {\n//     if (\n//         window.innerHeight + document.documentElement.scrollTop + 1 >=\n//         document.documentElement.scrollHeight\n//     ) {\n//         setLoading(true);\n//         setPage((prev) => prev + 1);\n//     }\n// };\n\n//   return (\n//     <div ref={containerRef}>\n//       <h1>Test Data</h1>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\nconst PAGE_NUMBER = 1;\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n\n  \n\n  // Simulated function to generate test data\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    setLoading(false);\n    return testData;\n  };\n\n  useEffect(() => {\n    // Measure the container height and update the state\n    setTimeout(() => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    }, 0);\n  }, []);\n\n  //\n  //THIS ONE WORKS!!!!\n  //\n  useEffect(() => {\n    let iterations = 0;\n    let isStarted = false;\n   \n    const initialDataIteration = () => {\n      if (containerRef.current.clientHeight > originalWindowHeight) {\n        console.log('Broken by height');\n        return; // Break when the container height exceeds the original window height\n      }\n\n      if (iterations >= maxIterations) {\n        console.log('Broken due to max iterations');\n        return; // Break after 5 iterations (maxIterations)\n      }\n\n      const currentPage = Math.ceil(data.length / pageSize) + 1;\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n      setData((prevData) => [...prevData, ...newData]);\n\n      console.log(`Iteration: ${iterations}`);\n      iterations++;\n\n      requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n      console.log(\"Is in init loop\");\n    };\n    if(!isStarted){\n    requestAnimationFrame(initialDataIteration); // Start the loop\n    }\n  \n  }, [containerHeight]);\n\n\n\n  \n//   //Scroll logic\n//   useEffect(() => {\n//     setTimeout(async () => {\n//       const currentPage = Math.ceil(data.length / pageSize) + 1;\n//       const startIndex = (currentPage - 1) * pageSize;\n//       const endIndex = startIndex + pageSize;\n//       const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n//       setData((prevData) => [...prevData, ...newData]);\n//       //setData((prevData) => [...newData]);\n\n//        setLoading(false);\n//     }, 1500);\n// }, [page]);\n\n// useEffect(() => {\n//     window.addEventListener(\"scroll\", handleScroll);\n\n//     return () => window.removeEventListener(\"scroll\", handleScroll);\n// }, []);\n\n// const handleScroll = async () => {\n//     if (\n//         window.innerHeight + document.documentElement.scrollTop + 1 >=\n//         document.documentElement.scrollHeight\n//     ) {\n//         setLoading(true);\n//         setPage((prev) => prev + 1);\n//     }\n// };\n\n  return (\n    <div ref={containerRef}>\n      <h1>Test Data</h1>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,WAAW,GAAG,CAAC;AAErB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAMa,YAAY,GAAGV,MAAM,CAAC,CAAC;EAC7B,MAAMW,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,aAAa,GAAG,EAAE,CAAC,CAAC;EAC1B,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}