{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n// export default function Dashboard() {\n//   return <p>Dashboard</p>\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 5; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n\n  // Simulated function to generate test data\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    return testData;\n  };\n  useEffect(() => {\n    // Measure the container height and update the state\n    if (containerRef.current) {\n      setContainerHeight(containerRef.current.clientHeight);\n    }\n  }, []);\n  useEffect(() => {\n    let iterations = 0;\n    const loadData = () => {\n      while (true) {\n        if (window.innerHeight > originalWindowHeight) {\n          console.log('Broken by height');\n          break; // Break when the container height exceeds the original window height\n        }\n\n        if (iterations >= maxIterations) {\n          console.log('Broken due to max iterations');\n          break; // Break after 20 iterations\n        }\n\n        console.log(`container ref current client height: ${containerRef.current.clientHeight}, \n        container ref current inner height: ${containerRef.current.innerHeight}, \n        container ref client height: ${containerRef.clientHeight}\n        container ref inner height: ${containerRef.innerHeight}\n        const window Height: ${originalWindowHeight}\n        window client height: ${window.clientHeight}\n        window inner height: ${window.innerHeight}\n        window outer height: ${window.outerHeight}`);\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData(prevData => [...prevData, ...newData]);\n        //setData((prevData) => [...newData]);\n\n        console.log(`Iteration: ${iterations}`);\n        iterations++;\n      }\n    };\n    loadData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"v3RnhSv0ZRQ+QDECrnnuaxjQS78=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","TestData","_s","data","setData","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","generateTestData","numberOfPoints","testData","i","push","id","name","current","setContainerHeight","clientHeight","iterations","loadData","console","log","outerHeight","currentPage","Math","ceil","length","startIndex","endIndex","newData","prevData","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n// export default function Dashboard() {\n//   return <p>Dashboard</p>\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const containerRef = useRef();\n  const pageSize = 10; // Number of data points to load per page\n  const maxIterations = 5; // Maximum number of iterations to prevent infinite loop\n  const originalWindowHeight = window.innerHeight;\n\n  // Simulated function to generate test data\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    return testData;\n  };\n\n  useEffect(() => {\n    // Measure the container height and update the state\n    if (containerRef.current) {\n      setContainerHeight(containerRef.current.clientHeight);\n    }\n  }, []);\n\n  useEffect(() => {\n    let iterations = 0;\n\n    const loadData = () => {\n      while (true) {\n        if (window.innerHeight > originalWindowHeight) {\n          console.log('Broken by height');\n          break; // Break when the container height exceeds the original window height\n        }\n\n        if (iterations >= maxIterations) {\n          console.log('Broken due to max iterations');\n          break; // Break after 20 iterations\n        }\n\n        console.log(`container ref current client height: ${containerRef.current.clientHeight}, \n        container ref current inner height: ${containerRef.current.innerHeight}, \n        container ref client height: ${containerRef.clientHeight}\n        container ref inner height: ${containerRef.innerHeight}\n        const window Height: ${originalWindowHeight}\n        window client height: ${window.clientHeight}\n        window inner height: ${window.innerHeight}\n        window outer height: ${window.outerHeight}`)\n\n\n        const currentPage = Math.ceil(data.length / pageSize) + 1;\n        const startIndex = (currentPage - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const newData = generateTestData(endIndex); // Generate test data up to the endIndex\n        setData((prevData) => [...prevData, ...newData]);\n        //setData((prevData) => [...newData]);\n\n        console.log(`Iteration: ${iterations}`)\n        iterations++;\n      }\n    };\n\n    loadData();\n  }, []);\n\n  return (\n    <div ref={containerRef}>\n      <h1>Test Data</h1>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestData;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMS,YAAY,GAAGP,MAAM,CAAC,CAAC;EAC7B,MAAMQ,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC;EACzB,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,WAAW;;EAE/C;EACA,MAAMC,gBAAgB,GAAIC,cAAc,IAAK;IAC3C,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,cAAc,EAAEE,CAAC,EAAE,EAAE;MACxCD,QAAQ,CAACE,IAAI,CAAC;QAAEC,EAAE,EAAEF,CAAC;QAAEG,IAAI,EAAG,cAAaH,CAAE;MAAE,CAAC,CAAC;IACnD;IACA,OAAOD,QAAQ;EACjB,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd;IACA,IAAIQ,YAAY,CAACa,OAAO,EAAE;MACxBC,kBAAkB,CAACd,YAAY,CAACa,OAAO,CAACE,YAAY,CAAC;IACvD;EACF,CAAC,EAAE,EAAE,CAAC;EAENvB,SAAS,CAAC,MAAM;IACd,IAAIwB,UAAU,GAAG,CAAC;IAElB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,OAAO,IAAI,EAAE;QACX,IAAIb,MAAM,CAACC,WAAW,GAAGF,oBAAoB,EAAE;UAC7Ce,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/B,MAAM,CAAC;QACT;;QAEA,IAAIH,UAAU,IAAId,aAAa,EAAE;UAC/BgB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;UAC3C,MAAM,CAAC;QACT;;QAEAD,OAAO,CAACC,GAAG,CAAE,wCAAuCnB,YAAY,CAACa,OAAO,CAACE,YAAa;AAC9F,8CAA8Cf,YAAY,CAACa,OAAO,CAACR,WAAY;AAC/E,uCAAuCL,YAAY,CAACe,YAAa;AACjE,sCAAsCf,YAAY,CAACK,WAAY;AAC/D,+BAA+BF,oBAAqB;AACpD,gCAAgCC,MAAM,CAACW,YAAa;AACpD,+BAA+BX,MAAM,CAACC,WAAY;AAClD,+BAA+BD,MAAM,CAACgB,WAAY,EAAC,CAAC;QAG5C,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACzB,IAAI,CAAC0B,MAAM,GAAGvB,QAAQ,CAAC,GAAG,CAAC;QACzD,MAAMwB,UAAU,GAAG,CAACJ,WAAW,GAAG,CAAC,IAAIpB,QAAQ;QAC/C,MAAMyB,QAAQ,GAAGD,UAAU,GAAGxB,QAAQ;QACtC,MAAM0B,OAAO,GAAGrB,gBAAgB,CAACoB,QAAQ,CAAC,CAAC,CAAC;QAC5C3B,OAAO,CAAE6B,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGD,OAAO,CAAC,CAAC;QAChD;;QAEAT,OAAO,CAACC,GAAG,CAAE,cAAaH,UAAW,EAAC,CAAC;QACvCA,UAAU,EAAE;MACd;IACF,CAAC;IAEDC,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA;IAAKkC,GAAG,EAAE7B,YAAa;IAAA8B,QAAA,gBACrBnC,OAAA;MAAAmC,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBvC,OAAA;MAAAmC,QAAA,EACGhC,IAAI,CAACqC,GAAG,CAAEC,IAAI,iBACbzC,OAAA;QAAAmC,QAAA,EAAmBM,IAAI,CAACxB;MAAI,GAAnBwB,IAAI,CAACzB,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrC,EAAA,CAzEID,QAAQ;AAAAyC,EAAA,GAARzC,QAAQ;AA2Ed,eAAeA,QAAQ;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}