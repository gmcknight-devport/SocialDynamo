{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\nimport React, { useEffect, useState } from \"react\";\n//import \"./App.css\";\nimport CryptoList from \"./components/CryptoList\";\nimport Loader from \"./components/Loader\";\nimport { Dashboard } from \"@mui/icons-material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 12;\n\n// Function to generate mock data with random values\nconst generateMockData = count => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000,\n      // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000 // Random market cap between 0 and 1 billion\n    });\n  }\n\n  return mockData;\n};\nconst DashboardImpl = () => {\n  _s();\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      // Simulating API call with random seed data\n      const mockData = generateMockData(PAGE_SIZE);\n      setCoinsData(prev => [...prev, ...mockData]);\n      setLoading(false);\n    }, 1500);\n  }, [page]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  const handleScroll = () => {\n    if (window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight) {\n      setLoading(true);\n      setPage(prev => prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crypto Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CryptoList, {\n      coinsData: coinsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardImpl, \"TvcR7153D/5eGINW/IroI+IMQPM=\");\n_c = DashboardImpl;\nexport default DashboardImpl;\nvar _c;\n$RefreshReg$(_c, \"DashboardImpl\");","map":{"version":3,"names":["React","useEffect","useState","CryptoList","Loader","Dashboard","jsxDEV","_jsxDEV","PAGE_SIZE","generateMockData","count","mockData","i","push","id","name","symbol","current_price","Math","random","market_cap","DashboardImpl","_s","coinsData","setCoinsData","page","setPage","loading","setLoading","setTimeout","prev","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import InfiniteScroll from '../components/infinitescroll';\n\n// const PAGE_SIZE = 5;\n\n// const generateRandomData = (count) => {\n//   const data = [];\n//   for (let i = 0; i < count; i++) {\n//     const item = {\n//       id: i + 1, // Assuming IDs start from 1\n//       name: `Item ${i + 1}`,\n//       description: `Description for Item ${i + 1}`,\n//     };\n//     data.push(item);\n//   }\n//   return data;\n// };\n\n// const TestPage = () => {\n//   // Simulated in-memory paginated dataset\n//   const [mockData, setMockData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const containerRef = useRef(); // Ref for the scroll container\n//   const [containerHeight, setContainerHeight] = useState(\n//     window.innerHeight + 10\n//   );\n\n//   // Function to generate random data for a given page number\n//   const generatePageData = (page) => {\n//     setLoading(true);\n//     setError(null);\n\n//     // Simulate API call delay\n//     setTimeout(() => {\n//       const startIndex = (page - 1) * PAGE_SIZE;\n//       const endIndex = startIndex + PAGE_SIZE;\n//       const newData = generateRandomData(PAGE_SIZE).map((item, index) => ({\n//         ...item,\n//         id: startIndex + index + 1,\n//       }));\n\n//       setMockData((prevData) => [...prevData, ...newData]);\n//       setCurrentPage((prevPage) => prevPage + 1);\n//       setLoading(false);\n//     }, 1000); // Simulate API call delay of 1 second\n//   };\n\n//   // Function to handle the scroll event on the container element\n//   const handleScroll = () => {\n//     const container = containerRef.current;\n//     if (container) {\n//       const { scrollTop, scrollHeight, clientHeight } = container;\n//       if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {\n//         // Load more data when the user has scrolled near the bottom and not already loading\n//         generatePageData(currentPage);\n//       }\n//     }\n//   };\n\n//   // Add the scroll event listener when the component mounts\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (container) {\n//       container.addEventListener('scroll', handleScroll);\n//     }\n\n//     // Remove the scroll event listener when the component unmounts\n//     return () => {\n//       if (container) {\n//         container.removeEventListener('scroll', handleScroll);\n//       }\n//     };\n//   }, [loading, currentPage]); // Add 'loading' and 'currentPage' as dependencies to prevent unnecessary event listener changes\n\n//   // Load one page of data initially\n//   useEffect(() => {\n//     generatePageData(1);\n//   }, []);\n\n//   // Update container height when mockData changes\n//   useEffect(() => {\n//     setContainerHeight((prevHeight) => prevHeight + 10);\n//   }, [mockData]);\n\n//   return (\n//     <div style={{ height: containerHeight + 'px', overflowY: 'hidden' }}>\n//       <h1>Test Page</h1>\n//       <div\n//         ref={containerRef}\n//         style={{ height: '100%', overflowY: 'scroll' }}\n//       >\n//         {mockData.map((item) => (\n//           <div key={item.id}>\n//             <p>{item.name}</p>\n//             <p>{item.description}</p>\n//             {/* Customize the rendering and interactions for each item */}\n//             <button onClick={() => console.log('Item clicked:', item)}>\n//               Click Me\n//             </button>\n//           </div>\n//         ))}\n//         {loading && <p>Loading...</p>}\n//         {!loading && mockData.length === 0 && <p>No more data to load.</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TestPage;\n\n\n\nimport React, { useEffect, useState } from \"react\";\n//import \"./App.css\";\nimport CryptoList from \"./components/CryptoList\";\nimport Loader from \"./components/Loader\";\nimport { Dashboard } from \"@mui/icons-material\";\n\nconst PAGE_SIZE = 12;\n\n// Function to generate mock data with random values\nconst generateMockData = (count) => {\n  const mockData = [];\n  for (let i = 0; i < count; i++) {\n    mockData.push({\n      id: i + 1,\n      name: `Crypto ${i + 1}`,\n      symbol: `CRYP${i + 1}`,\n      current_price: Math.random() * 1000, // Random price between 0 and 1000\n      market_cap: Math.random() * 1000000000, // Random market cap between 0 and 1 billion\n    });\n  }\n  return mockData;\n};\n\nconst DashboardImpl = () => {\n  const [coinsData, setCoinsData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      // Simulating API call with random seed data\n      const mockData = generateMockData(PAGE_SIZE);\n      setCoinsData((prev) => [...prev, ...mockData]);\n      setLoading(false);\n    }, 1500);\n  }, [page]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop + 1 >=\n      document.documentElement.scrollHeight\n    ) {\n      setLoading(true);\n      setPage((prev) => prev + 1);\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Crypto Gallery</h1>\n      <CryptoList coinsData={coinsData} />\n      {loading && <Loader />}\n    </div>\n  );\n};\n\nexport default DashboardImpl;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,SAAS,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAG,EAAE;;AAEpB;AACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9BD,QAAQ,CAACE,IAAI,CAAC;MACZC,EAAE,EAAEF,CAAC,GAAG,CAAC;MACTG,IAAI,EAAG,UAASH,CAAC,GAAG,CAAE,EAAC;MACvBI,MAAM,EAAG,OAAMJ,CAAC,GAAG,CAAE,EAAC;MACtBK,aAAa,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI;MAAE;MACrCC,UAAU,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAE;IAC1C,CAAC,CAAC;EACJ;;EACA,OAAOR,QAAQ;AACjB,CAAC;AAED,MAAMU,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd4B,UAAU,CAAC,MAAM;MACf;MACA,MAAMlB,QAAQ,GAAGF,gBAAgB,CAACD,SAAS,CAAC;MAC5CgB,YAAY,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE,GAAGnB,QAAQ,CAAC,CAAC;MAC9CiB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEVxB,SAAS,CAAC,MAAM;IACd8B,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEC,YAAY,CAAC;IAE/C,OAAO,MAAMF,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAED,YAAY,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzB,IACEF,MAAM,CAACI,WAAW,GAAGC,QAAQ,CAACC,eAAe,CAACC,SAAS,GAAG,CAAC,IAC3DF,QAAQ,CAACC,eAAe,CAACE,YAAY,EACrC;MACAX,UAAU,CAAC,IAAI,CAAC;MAChBF,OAAO,CAAEI,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,oBACEvB,OAAA;IAAKiC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlC,OAAA;MAAAkC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBtC,OAAA,CAACJ,UAAU;MAACoB,SAAS,EAAEA;IAAU;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnClB,OAAO,iBAAIpB,OAAA,CAACH,MAAM;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAACvB,EAAA,CArCID,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAuCnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}