{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loadingspinner';\n// import ReactLoader from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n\n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n\n//   //Scroll logic\n// //   useEffect(() => {\n// //     setTimeout(async () => {\n// //       addDataToPage()\n// //     }, 1500);\n// // }, [page]);\n\n// // useEffect(() => {\n// //     window.addEventListener(\"scroll\", handleScroll);\n\n// //     return () => window.removeEventListener(\"scroll\", handleScroll);\n// // }, []);\n\n// const handleScroll = async () => {\n// //const handleScroll = async () => {\n//   const isScrolledToBottom =\n//         window.innerHeight + document.documentElement.scrollTop + 1 >=\n//         document.documentElement.scrollHeight;\n\n//     if (isScrolledToBottom) {\n//         setLoading(true);\n//         console.log(`Should be loading, loading: ${loading}`)\n//         setPage((prev) => prev + 1);\n//     }\n// };\n// useEffect(() => {\n//   const scrollHandler = async () => {\n//     await handleScroll(); // Execute the scroll logic\n//     setLoading(true);    // Set loading state to true after scroll logic is done\n//   };\n\n//   window.addEventListener(\"scroll\", scrollHandler);\n\n//   return () => window.removeEventListener(\"scroll\", scrollHandler);\n// }, []);\n\n//  // Watch for changes in the loading state\n//  useEffect(() => {\n//   // When loading becomes true, set it back to false after a delay\n//   if (loading) {\n//     const timeout = setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n\n//     // Cleanup function\n//     return () => clearTimeout(timeout);\n//   }\n// }, [loading]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {console.log(\"Should display spinner\")}\n//       {console.log(`loading: ${loading}`)}\n//       {loading && <LoadingSpinner />}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n\n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n\n//   //Scroll logic\n// //   useEffect(() => {\n// //     setTimeout(async () => {\n// //       addDataToPage()\n// //     }, 1500);\n// // }, [page]);\n\n// // useEffect(() => {\n// //     window.addEventListener(\"scroll\", handleScroll);\n\n// //     return () => window.removeEventListener(\"scroll\", handleScroll);\n// // }, []);\n\n// useEffect(() => {\n//   setLoading(true); // Set loading to true before fetching data\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n//     setData((prevData) => [...prevData, ...newData]);\n//     setLoading(false); // Set loading back to false after data is fetched\n//   }, 1500);\n\n//   return () => {\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };\n// }, [page]);\n\n// const handleScroll = () => {\n//   if (\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n//   ) {\n//     setPage((prevPage) => prevPage + 1);\n//   }\n// };\n\n// useEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\nconst TestData = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const containerRef = useRef();\n  const pageSize = 10;\n  const maxIterations = 20;\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n  const generateTestData = numberOfPoints => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    return testData;\n  };\n  const handleScroll = () => {\n    const isScrolledToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrolledToBottom && !loading) {\n      setLoading(true);\n      setPage(prevPage => prevPage + 1);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n    const timeout = setTimeout(() => {\n      const newData = generateTestData(pageSize);\n      setData(prevData => [...prevData, ...newData]);\n      setLoading(false);\n    }, 1500);\n    return () => clearTimeout(timeout);\n  }, [page]);\n  useLayoutEffect(() => {\n    setTimeout(() => {\n      if (containerRef.current) {\n        const newContainerHeight = containerRef.current.clientHeight;\n        if (newContainerHeight > originalWindowHeight || loading) {\n          // Stop further loading when container height exceeds original window height\n          return;\n        }\n        if (currPage <= maxIterations) {\n          addDataToPage();\n        }\n      }\n    }, 0);\n  }, [containerRef, loading]);\n  const addDataToPage = () => {\n    let testData = [];\n    const startIndex = (currPage - 1) * pageSize;\n    for (let i = startIndex; i < startIndex + pageSize && i < MaxSeed; i++) {\n      testData.push({\n        id: i,\n        name: `Data Point ${i}`\n      });\n    }\n    currPage++;\n    setData(prevData => [...prevData, ...testData]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 19\n    }, this), resultsEnd && \"No More Posts\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s(TestData, \"k5rH1WLFifyCrLTHXJ14gjhiVgE=\");\n_c = TestData;\nexport default TestData;\nvar _c;\n$RefreshReg$(_c, \"TestData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","LoadingSpinner","jsxDEV","_jsxDEV","PAGE_NUMBER","MaxSeed","currPage","TestData","_s","data","setData","containerRef","pageSize","maxIterations","originalWindowHeight","window","innerHeight","page","setPage","loading","setLoading","resultsEnd","setResultsEnd","generateTestData","numberOfPoints","testData","i","push","id","name","handleScroll","isScrolledToBottom","document","documentElement","scrollTop","scrollHeight","prevPage","addEventListener","removeEventListener","timeout","setTimeout","newData","prevData","clearTimeout","useLayoutEffect","current","newContainerHeight","clientHeight","addDataToPage","startIndex","ref","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loadingspinner';\n// import ReactLoader from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n    \n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    \n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n  \n//   //Scroll logic\n// //   useEffect(() => {\n// //     setTimeout(async () => {\n// //       addDataToPage()\n// //     }, 1500);\n// // }, [page]);\n\n// // useEffect(() => {\n// //     window.addEventListener(\"scroll\", handleScroll);\n\n// //     return () => window.removeEventListener(\"scroll\", handleScroll);\n// // }, []);\n\n// const handleScroll = async () => {\n// //const handleScroll = async () => {\n//   const isScrolledToBottom =\n//         window.innerHeight + document.documentElement.scrollTop + 1 >=\n//         document.documentElement.scrollHeight;\n\n//     if (isScrolledToBottom) {\n//         setLoading(true);\n//         console.log(`Should be loading, loading: ${loading}`)\n//         setPage((prev) => prev + 1);\n//     }\n// };\n// useEffect(() => {\n//   const scrollHandler = async () => {\n//     await handleScroll(); // Execute the scroll logic\n//     setLoading(true);    // Set loading state to true after scroll logic is done\n//   };\n\n//   window.addEventListener(\"scroll\", scrollHandler);\n\n//   return () => window.removeEventListener(\"scroll\", scrollHandler);\n// }, []);\n\n//  // Watch for changes in the loading state\n//  useEffect(() => {\n//   // When loading becomes true, set it back to false after a delay\n//   if (loading) {\n//     const timeout = setTimeout(() => {\n//       setLoading(false);\n//     }, 1500);\n\n//     // Cleanup function\n//     return () => clearTimeout(timeout);\n//   }\n// }, [loading]);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {console.log(\"Should display spinner\")}\n//       {console.log(`loading: ${loading}`)}\n//       {loading && <LoadingSpinner />}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n\n\n// import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n// import LoadingSpinner from '../components/loader';\n\n// const PAGE_NUMBER = 1;\n// const MaxSeed = 100;\n// var currPage = 1;\n\n// const TestData = () => {\n//   const [data, setData] = useState([]);\n//   const [containerHeight, setContainerHeight] = useState(0);\n//   const containerRef = useRef();\n//   const pageSize = 10; // Number of data points to load per page\n//   const maxIterations = 20; // Maximum number of iterations to prevent infinite loop\n//   const originalWindowHeight = window.innerHeight;\n//   const [page, setPage] = useState(PAGE_NUMBER);\n//   const [loading, setLoading] = useState(false);\n//   const [resultsEnd, setResultsEnd] = useState(false);\n\n//   // Simulated function to generate test data\n//   const generateTestData = (numberOfPoints) => {\n//     const testData = [];\n//     for (let i = 1; i <= numberOfPoints; i++) {\n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n    \n//     return testData;\n//   };\n\n//   useLayoutEffect(() => {\n//     // Measure the container height and update the state\n//     setTimeout(() => {\n//       if (containerRef.current) {\n//         setContainerHeight(containerRef.current.clientHeight);\n//       }\n//     }, 0);\n//   }, []);\n\n//   useLayoutEffect(() => {\n//     let iterations = 0;\n\n//     const initialDataIteration = () => {\n//       if (containerRef.current.clientHeight > originalWindowHeight) {\n//         console.log('Broken by height');\n//         return; // Break when the container height exceeds the original window height\n//       }\n\n//       if (iterations >= maxIterations) {\n//         console.log('Broken due to max iterations');\n//         return; // Break after 5 iterations (maxIterations)\n//       }\n\n//       addDataToPage();\n\n//       console.log(`Iteration: ${iterations}`);\n//       iterations++;\n\n//       requestAnimationFrame(initialDataIteration); // Continue to the next iteration\n//     };\n\n//     requestAnimationFrame(initialDataIteration); // Start the loop\n//   }, [containerHeight]);\n\n//   //Function to add data\n//   const addDataToPage = () => {\n//     let testData = [];\n//     console.log(\"In add data method\");\n//     ++currPage;\n//     let startIndex = (currPage - 1) * 10\n//     console.log(`Start index: ${startIndex}, maxSeed: ${MaxSeed}`);\n    \n//     for (let i = startIndex; i < startIndex + pageSize; i++) {        \n//       testData.push({ id: i, name: `Data Point ${i}` });\n//     }\n\n//     currPage++;    \n//     setData((prevData) => [...prevData, ...testData]);\n//     setLoading(false);\n//   }\n  \n//   //Scroll logic\n// //   useEffect(() => {\n// //     setTimeout(async () => {\n// //       addDataToPage()\n// //     }, 1500);\n// // }, [page]);\n\n// // useEffect(() => {\n// //     window.addEventListener(\"scroll\", handleScroll);\n\n// //     return () => window.removeEventListener(\"scroll\", handleScroll);\n// // }, []);\n\n// useEffect(() => {\n//   setLoading(true); // Set loading to true before fetching data\n\n//   const timeout = setTimeout(() => {\n//     const newData = generateTestData(pageSize);\n//     setData((prevData) => [...prevData, ...newData]);\n//     setLoading(false); // Set loading back to false after data is fetched\n//   }, 1500);\n\n//   return () => {\n//     clearTimeout(timeout); // Cleanup function clears the timeout\n//   };\n// }, [page]);\n\n// const handleScroll = () => {\n//   if (\n//     window.innerHeight + document.documentElement.scrollTop + 1 >=\n//     document.documentElement.scrollHeight\n//   ) {\n//     setPage((prevPage) => prevPage + 1);\n//   }\n// };\n\n// useEffect(() => {\n//   window.addEventListener('scroll', handleScroll);\n//   return () => window.removeEventListener('scroll', handleScroll);\n// }, []);\n\n//   return (\n//     <div ref={containerRef}>\n//       <ul>\n//         {data.map((item) => (\n//           <li key={item.id}>{item.name}</li>\n//         ))}\n//       </ul>\n//       {loading && <LoadingSpinner />}\n//       {resultsEnd && \"No More Posts\"}\n//     </div>\n//   );\n// };\n\n// export default TestData;\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport LoadingSpinner from '../components/loader';\n\nconst PAGE_NUMBER = 1;\nconst MaxSeed = 100;\nvar currPage = 1;\n\nconst TestData = () => {\n  const [data, setData] = useState([]);\n  const containerRef = useRef();\n  const pageSize = 10;\n  const maxIterations = 20;\n  const originalWindowHeight = window.innerHeight;\n  const [page, setPage] = useState(PAGE_NUMBER);\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  const generateTestData = (numberOfPoints) => {\n    const testData = [];\n    for (let i = 1; i <= numberOfPoints; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n    return testData;\n  };\n\n  const handleScroll = () => {\n    const isScrolledToBottom =\n      window.innerHeight + document.documentElement.scrollTop + 1 >=\n      document.documentElement.scrollHeight;\n\n    if (isScrolledToBottom && !loading) {\n      setLoading(true);\n      setPage((prevPage) => prevPage + 1);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const timeout = setTimeout(() => {\n      const newData = generateTestData(pageSize);\n      setData((prevData) => [...prevData, ...newData]);\n      setLoading(false);\n    }, 1500);\n\n    return () => clearTimeout(timeout);\n  }, [page]);\n\n  useLayoutEffect(() => {\n    setTimeout(() => {\n      if (containerRef.current) {\n        const newContainerHeight = containerRef.current.clientHeight;\n        if (newContainerHeight > originalWindowHeight || loading) {\n          // Stop further loading when container height exceeds original window height\n          return;\n        }\n        if (currPage <= maxIterations) {\n          addDataToPage();\n        }\n      }\n    }, 0);\n  }, [containerRef, loading]);\n\n  const addDataToPage = () => {\n    let testData = [];\n    const startIndex = (currPage - 1) * pageSize;\n    for (let i = startIndex; i < startIndex + pageSize && i < MaxSeed; i++) {\n      testData.push({ id: i, name: `Data Point ${i}` });\n    }\n\n    currPage++;\n    setData((prevData) => [...prevData, ...testData]);\n  };\n\n  return (\n    <div ref={containerRef}>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n      {loading && <LoadingSpinner />}\n      {resultsEnd && \"No More Posts\"}\n    </div>\n  );\n};\n\nexport default TestData;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK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"},"metadata":{},"sourceType":"module","externalDependencies":[]}