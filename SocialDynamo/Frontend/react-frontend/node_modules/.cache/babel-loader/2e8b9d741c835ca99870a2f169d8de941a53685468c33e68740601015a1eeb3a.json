{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\nimport React, { useState } from 'react';\nimport InfiniteScroll from '../components/infinitescroll';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 100; // Number of items per page\n\nconst generateRandomData = count => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const item = {\n      id: i + 1,\n      // Assuming IDs start from 1\n      name: `Item ${i + 1}`,\n      description: `Description for Item ${i + 1}`\n    };\n    data.push(item);\n  }\n  return data;\n};\nconst TestPage = () => {\n  _s();\n  // Simulated in-memory paginated dataset\n  const [mockData, setMockData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Function to generate random data for the initial page load\n  useState(() => {\n    const initialData = generateRandomData(PAGE_SIZE);\n    setMockData(initialData);\n  }, []);\n\n  // Function to simulate loading more data for pagination\n  const loadMoreData = () => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call delay\n    setTimeout(() => {\n      // Split the dataset into chunks to mimic different pages\n      const startIndex = (currentPage - 1) * PAGE_SIZE;\n      const endIndex = startIndex + PAGE_SIZE;\n      const newData = mockDataset.slice(startIndex, endIndex);\n      setMockData(prevData => [...prevData, ...newData]);\n      setCurrentPage(prevPage => prevPage + 1);\n      setLoading(false);\n    }, 1000); // Simulate API call delay of 1 second\n  };\n\n  // Function to simulate handling clicks on individual items\n  const handleItemClick = item => {\n    // Handle the click on individual items here\n    console.log('Item clicked:', item);\n  };\n  const renderData = item => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleItemClick(item),\n        children: \"Click Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      data: mockData,\n      loading: loading,\n      error: error,\n      onLoadMore: loadMoreData,\n      renderData: renderData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"n4JCZNIux9Sg1tqp2NQIrq2mA34=\");\n_c = TestPage;\nexport default TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","InfiniteScroll","jsxDEV","_jsxDEV","PAGE_SIZE","generateRandomData","count","data","i","item","id","name","description","push","TestPage","_s","mockData","setMockData","loading","setLoading","error","setError","currentPage","setCurrentPage","initialData","loadMoreData","setTimeout","startIndex","endIndex","newData","mockDataset","slice","prevData","prevPage","handleItemClick","console","log","renderData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onLoadMore","_c","$RefreshReg$"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/pages/dashboard.js"],"sourcesContent":["// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Header from '../components/header';\n// import Timeline from '../components/timeline';\n// import Sidebar from '../components/sidebar';\n// import useUser from '../hooks/use-user';\n// import LoggedInUserContext from '../context/logged-in-user';\n\n// export default function Dashboard({ user: loggedInUser }) {\n//   const { user, setActiveUser } = useUser(loggedInUser.uid);\n//   useEffect(() => {\n//     document.title = 'Instagram';\n//   }, []);\n\n//   return (\n//     <LoggedInUserContext.Provider value={{ user, setActiveUser }}>\n//       <div className=\"bg-gray-background\">\n//         <Header />\n//         <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n//           <Timeline />\n//           <Sidebar />\n//         </div>\n//       </div>\n//     </LoggedInUserContext.Provider>\n//   );\n// }\n\n// Dashboard.propTypes = {\n//   user: PropTypes.object.isRequired\n// };\nimport React, { useState } from 'react';\nimport InfiniteScroll from '../components/infinitescroll';\n\nconst PAGE_SIZE = 100; // Number of items per page\n\nconst generateRandomData = (count) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const item = {\n      id: i + 1, // Assuming IDs start from 1\n      name: `Item ${i + 1}`,\n      description: `Description for Item ${i + 1}`,\n    };\n    data.push(item);\n  }\n  return data;\n};\n\nconst TestPage = () => {\n  // Simulated in-memory paginated dataset\n  const [mockData, setMockData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Function to generate random data for the initial page load\n  useState(() => {\n    const initialData = generateRandomData(PAGE_SIZE);\n    setMockData(initialData);\n  }, []);\n\n  // Function to simulate loading more data for pagination\n  const loadMoreData = () => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call delay\n    setTimeout(() => {\n      // Split the dataset into chunks to mimic different pages\n      const startIndex = (currentPage - 1) * PAGE_SIZE;\n      const endIndex = startIndex + PAGE_SIZE;\n      const newData = mockDataset.slice(startIndex, endIndex);\n\n      setMockData((prevData) => [...prevData, ...newData]);\n      setCurrentPage((prevPage) => prevPage + 1);\n      setLoading(false);\n    }, 1000); // Simulate API call delay of 1 second\n  };\n\n  // Function to simulate handling clicks on individual items\n  const handleItemClick = (item) => {\n    // Handle the click on individual items here\n    console.log('Item clicked:', item);\n  };\n\n  const renderData = (item) => {\n    return (\n      <div>\n        <p>{item.name}</p>\n        <p>{item.description}</p>\n        {/* Customize the rendering and interactions for each item */}\n        <button onClick={() => handleItemClick(item)}>Click Me</button>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Test Page</h1>\n      <InfiniteScroll\n        data={mockData}\n        loading={loading}\n        error={error}\n        onLoadMore={loadMoreData}\n        renderData={renderData}\n      />\n    </div>\n  );\n};\n\nexport default TestPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}