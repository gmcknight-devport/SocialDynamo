{"ast":null,"code":"var _jsxFileName = \"D:\\\\Glenn McKnight\\\\Documents\\\\Github\\\\SocialDynamo\\\\SocialDynamo\\\\Frontend\\\\react-frontend\\\\src\\\\components\\\\profile\\\\profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './profile.css';\nimport ProfileHeader from './profile-header';\nimport BlobToImage from '../../util/blob-to-image';\nimport LoadingSpinner from '../loader';\nimport Post from '../post/post';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction profile(_ref) {\n  _s();\n  let {\n    testData\n  } = _ref;\n  //Need a grid of 9 x 9?? Might not be since it'll be an array of posts? Check Karl Hadwen\n\n  //css for post in modal - expand in order to accommodate standard size?\n\n  //Might need a way to trigger scrolling function\n  //Might need to extent the page to 110% length in css in order to enable scrolling\n\n  //Can potentially remove timer from scolling logic\n\n  //Remove test data from parenthesis\n\n  const [modal, setModal] = useState(false);\n  const [error, setError] = useState('');\n  const {\n    userId\n  } = useParams();\n  const [page, setPage] = useState(1);\n  const [posts, setPosts] = useState('');\n  const [images, setImages] = useState('');\n  const [loadingImages, setLoadingImages] = useState(true);\n  const [selectedPostIndex, setSelectedPostIndex] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [resultsEnd, setResultsEnd] = useState(false);\n\n  //Initialise posts\n  useEffect(() => {\n    const fetchData = async () => {\n      await getUserPosts();\n    };\n    fetchData();\n  }, []);\n\n  //Modal logic\n  const toggleModal = () => {\n    setModal(!modal);\n  };\n  if (modal) {\n    document.body.classList.add('active-modal');\n  } else {\n    document.body.classList.remove('active-modal');\n  }\n\n  //Get user posts from api\n  const getUserPosts = async () => {\n    // //Fetch data\n    // const response = await fetch(`http://20.49.168.20:80/baseaggregator/userposts/${userId}/${page}`, {\n    //     method: 'GET',\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //     },\n    // });\n\n    // //Handle different responses\n    // const dataWrapper = await response.json();\n    // const { statusCode, data } = dataWrapper;\n\n    const statusCode = 200;\n    const data = testData;\n    if (statusCode === 200) {\n      setPosts(prevData => [...prevData, data]);\n      setPage(page + 1);\n      setError('');\n\n      // data.forEach(post => {\n      //     const image = fetchImages(post.Files[0]);\n      //     setImages((prevImages) => [...prevImages, image]);\n      // });\n      const imagesArray = [];\n      for (const post of data) {\n        const image = await fetchImages(post.Files[0]);\n        imagesArray.push(image);\n      }\n      setImages(prevImages => [...prevImages, ...imagesArray]);\n      setLoadingImages(false);\n    } else {\n      setError(dataWrapper.value);\n      setResultsEnd(true);\n    }\n  };\n\n  //Convert blob to url for post grid\n  const fetchImages = async image => {\n    const result = await BlobToImage({\n      byteArray: image\n    });\n    setImages(prevImages => [...prevImages, result]);\n  };\n\n  //Infinite scrolling logic\n  const handleScroll = () => {\n    const isScrollingToBottom = window.innerHeight + document.documentElement.scrollTop + 1 >= document.documentElement.scrollHeight;\n    if (isScrollingToBottom && !loading && !resultsEnd) {\n      setLoading(true);\n      getUserPosts();\n      setTimeout(() => {\n        setLoading(false);\n      }, 1500);\n    }\n  };\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  //\n  //\n  // Should be using postId instead of index??\n  //\n\n  //Set post data and open modal\n  const openPost = index => {\n    setSelectedPostIndex(index);\n    toggleModal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Profile\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header\",\n      children: /*#__PURE__*/_jsxDEV(ProfileHeader, {\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), console.log(\"Images length: \" + images.length), loadingImages ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this) // You can render a loading spinner or other loading indicator\n    : images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-grid\",\n      children: [console.log(\"Images inside render method: \" + images.length), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 27\n      }, this), images && images.map((data, index) => {\n        return (\n          /*#__PURE__*/\n          // <li className={\"image-grid\"} onClick={() => openPost(index)}>\n          _jsxDEV(\"img\", {\n            className: \"image\",\n            src: data.original || '',\n            alt: data.original === null ? 'Image not found' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)\n          // </li>\n        );\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), modal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggleModal,\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: posts[selectedPostIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }, this), resultsEnd && \"No More Posts\", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-modal\",\n        onClick: toggleModal,\n        children: /*#__PURE__*/_jsxDEV(CancelOutlinedIcon, {\n          className: \"closeIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(profile, \"TMWmVk/6tQBLYVcfqIFWVuW9He8=\", false, function () {\n  return [useParams];\n});\nexport default profile;","map":{"version":3,"names":["React","useEffect","useLayoutEffect","useState","useParams","ProfileHeader","BlobToImage","LoadingSpinner","Post","CancelOutlinedIcon","jsxDEV","_jsxDEV","profile","_ref","_s","testData","modal","setModal","error","setError","userId","page","setPage","posts","setPosts","images","setImages","loadingImages","setLoadingImages","selectedPostIndex","setSelectedPostIndex","loading","setLoading","resultsEnd","setResultsEnd","fetchData","getUserPosts","toggleModal","document","body","classList","add","remove","statusCode","data","prevData","imagesArray","post","image","fetchImages","Files","push","prevImages","dataWrapper","value","result","byteArray","handleScroll","isScrollingToBottom","window","innerHeight","documentElement","scrollTop","scrollHeight","setTimeout","addEventListener","removeEventListener","openPost","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","length","map","src","original","alt","onClick"],"sources":["D:/Glenn McKnight/Documents/Github/SocialDynamo/SocialDynamo/Frontend/react-frontend/src/components/profile/profile.js"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport './profile.css';\r\nimport ProfileHeader from './profile-header';\r\nimport BlobToImage from '../../util/blob-to-image';\r\nimport LoadingSpinner from '../loader';\r\nimport Post from '../post/post';\r\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\r\n\r\nfunction profile({testData}) {\r\n\r\n    //Need a grid of 9 x 9?? Might not be since it'll be an array of posts? Check Karl Hadwen\r\n        \r\n    //css for post in modal - expand in order to accommodate standard size?\r\n    \r\n    //Might need a way to trigger scrolling function\r\n    //Might need to extent the page to 110% length in css in order to enable scrolling\r\n\r\n    //Can potentially remove timer from scolling logic\r\n\r\n    //Remove test data from parenthesis\r\n\r\n\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const {userId} = useParams();\r\n    const [page, setPage] = useState(1);\r\n    const [posts, setPosts] = useState('');\r\n    const [images, setImages] = useState('');\r\n    const [loadingImages, setLoadingImages] = useState(true);\r\n    const [selectedPostIndex, setSelectedPostIndex] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultsEnd, setResultsEnd] = useState(false);\r\n\r\n    //Initialise posts\r\n    useEffect(()=> {\r\n        const fetchData = async () => {\r\n            await getUserPosts();\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    //Modal logic\r\n    const toggleModal = () => {\r\n        setModal(!modal)\r\n    }\r\n\r\n    if(modal) {\r\n        document.body.classList.add('active-modal')\r\n    } else {\r\n        document.body.classList.remove('active-modal')\r\n    }\r\n\r\n    //Get user posts from api\r\n    const getUserPosts = async () => {\r\n        // //Fetch data\r\n        // const response = await fetch(`http://20.49.168.20:80/baseaggregator/userposts/${userId}/${page}`, {\r\n        //     method: 'GET',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //     },\r\n        // });\r\n\r\n        // //Handle different responses\r\n        // const dataWrapper = await response.json();\r\n        // const { statusCode, data } = dataWrapper;\r\n\r\n\r\n        const statusCode = 200;\r\n        const data = testData;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n        if (statusCode === 200) {\r\n            setPosts((prevData) => [...prevData, data]);  \r\n            setPage(page + 1); \r\n            setError('');   \r\n            \r\n            // data.forEach(post => {\r\n            //     const image = fetchImages(post.Files[0]);\r\n            //     setImages((prevImages) => [...prevImages, image]);\r\n            // });\r\n            const imagesArray = [];\r\n\r\n            for (const post of data) {\r\n                const image = await fetchImages(post.Files[0]);\r\n                imagesArray.push(image);\r\n            }\r\n\r\n            setImages((prevImages) => [...prevImages, ...imagesArray]);\r\n            setLoadingImages(false);\r\n\r\n        } else {\r\n            setError(dataWrapper.value);\r\n            setResultsEnd(true);\r\n        }\r\n    };\r\n\r\n    //Convert blob to url for post grid\r\n    const fetchImages = async (image) => {\r\n        const result = await BlobToImage({ byteArray: image });\r\n        setImages((prevImages) => [...prevImages, result]);\r\n    };\r\n      \r\n    //Infinite scrolling logic\r\n    const handleScroll = () => {\r\n        const isScrollingToBottom =\r\n            window.innerHeight + document.documentElement.scrollTop + 1 >=\r\n            document.documentElement.scrollHeight\r\n    \r\n        if (isScrollingToBottom && !loading && !resultsEnd) {\r\n            setLoading(true);        \r\n            getUserPosts();\r\n\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 1500);\r\n        }\r\n    };\r\n    \r\n    useLayoutEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n\r\n    //\r\n    //\r\n    // Should be using postId instead of index??\r\n    //\r\n\r\n    //Set post data and open modal\r\n    const openPost = (index) => {\r\n        setSelectedPostIndex(index)\r\n        toggleModal();\r\n    };\r\n\r\nreturn (\r\n    <div className='Profile'>\r\n        <div className='profile-header'>\r\n            <ProfileHeader userId={userId}/>\r\n        </div>\r\n        {console.log(\"Images length: \" + images.length)}\r\n        {loadingImages ? (\r\n            <LoadingSpinner /> // You can render a loading spinner or other loading indicator\r\n        ) : (\r\n            images.length > 0 && (\r\n            <div className='post-grid'>\r\n\r\n                {console.log(\"Images inside render method: \" + images.length)}\r\n\r\n                {error && <p className=\"error-message\">{error}</p>}\r\n                {images && images.map((data, index) => {\r\n                    return (\r\n                        // <li className={\"image-grid\"} onClick={() => openPost(index)}>\r\n                            <img className=\"image\"\r\n                                src={data.original || ''}\r\n                                alt={data.original === null ? 'Image not found': ''}\r\n                            />\r\n                        // </li>\r\n                    );\r\n                })}\r\n            </div> \r\n            )\r\n        )}  \r\n        {modal && (\r\n            <div className='modal'>\r\n                <div onClick={toggleModal} className=\"overlay\"></div>\r\n                <div className='modal-body'>     \r\n                    {<Post post={posts[selectedPostIndex]}/>}\r\n                </div>\r\n                {loading && <LoadingSpinner />}\r\n                {resultsEnd && \"No More Posts\"}\r\n                <button className=\"close-modal\" onClick={toggleModal}>\r\n                    <CancelOutlinedIcon className='closeIcon'/>\r\n                </button>\r\n            </div>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default profile"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}